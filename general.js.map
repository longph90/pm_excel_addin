{"version":3,"file":"general.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commons/common.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/./src/general/home.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n/* global bootstrap */\n\nexport const STATUS = Object.freeze({\n  OPEN: \"OPEN\",\n  IN_PROGRESS: \"IN_PROGRESS\",\n  WAITING_REVIEW: \"WAITING_REVIEW\",\n  WAITING_RELEASE: \"WAITING_RELEASE\",\n  RELEASED: \"RELEASED\",\n});\n\n/**\n * Converts a JavaScript Date string to an Excel date number.\n * @param {string} dateString - The date string in 'YYYY-MM-DD' format.\n * @returns {number} The Excel date number.\n */\nexport function jsDateToExcelDate(dateString) {\n  // Convert the date string to a JavaScript Date object\n  const date = new Date(dateString);\n  // Convert JavaScript Date to Excel date number\n  let excelDate = 25569.0 + (date.getTime() - date.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24);\n  return excelDate;\n}\n\n/**\n * Converts an Excel date number to a JavaScript Date object.\n * @param {number} excelDate - The Excel date number.\n * @returns {string} The date in 'YYYY-MM-DD' format, or an empty string if input is invalid.\n */\nexport function excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\nexport function convertDecimalToTime(decimal) {\n  if (decimal === null || decimal === \"\") return \"\";\n  const totalMinutes = Math.round(decimal * 24 * 60);\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n\n  const formattedHours = String(hours).padStart(2, \"0\");\n  const formattedMinutes = String(minutes).padStart(2, \"0\");\n\n  return `${formattedHours}:${formattedMinutes}`;\n}\n\n/**\n * Displays a notification message to the user.\n * @param {string} message - The message to display.\n * @param {string} type - The type of notification (e.g., 'success', 'error', 'warning').\n */\nexport function showNotification(message, type) {\n  // Get the notification element\n  const notificationEl = document.getElementById(\"notification\");\n\n  // Set the message content\n  notificationEl.textContent = message;\n\n  // Set the CSS classes for styling and positioning\n  notificationEl.className = `alert alert-${type}`;\n\n  // Make the notification visible\n  notificationEl.style.display = \"block\";\n\n  // Hide the notification after 5 seconds\n  setTimeout(() => {\n    notificationEl.style.display = \"none\";\n  }, 10000);\n}\n\nexport async function getDataTable(sheetName, tableName) {\n  try {\n    return await Excel.run(async (context) => {\n      // Get the specified sheet\n      const sheet = context.workbook.worksheets.getItem(sheetName);\n      // Get the specified table\n      const table = sheet.tables.getItem(tableName);\n      // Load the header row\n      const range = table.getRange();\n      range.load(\"values\");\n\n      await context.sync();\n      return range.values; // Trả về dữ liệu\n    });\n  } catch (error) {\n    showNotification(\"Error when reading data from \" + sheetName + \": \" + error.message, \"danger\");\n    throw error; // Ném lỗi để xử lý bên ngoài\n  }\n}\n\nexport async function getDataHeader(sheetName, tableName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0];\n  } catch (error) {\n    showNotification(\"Error when reading data from\" + sheetName + \": \" + error.message, \"danger\");\n  }\n}\n\nexport async function getIndexByColumnName(sheetName, tableName, columnName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0].indexOf(columnName);\n  } catch (error) {\n    return -1;\n  }\n}\n\nexport function getIndexRowbyTaskId(data, taskId) {\n  try {\n    const taskIndex = data.findIndex((row) => row[0] === taskId); // Tìm index của task\n    return taskIndex;\n  } catch (error) {\n    return -1;\n  }\n}\nexport function updateDataTable(sheetName, tableName, rowIndex, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo map từ tên cột đến index\n        let columnIndexMap = {};\n        headerRow.forEach((columnName, index) => {\n          columnIndexMap[columnName] = index;\n        });\n\n        // Cập nhật các giá trị tại vị trí chỉ định\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = columnIndexMap[columnName];\n            if (columnIndex !== undefined) {\n              range.values[rowIndex][columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Chỉ cập nhật đúng range ứng với rowIndex\n        let rowRange = table.getDataBodyRange().getRow(rowIndex);\n        rowRange.values = [range.values[rowIndex]];\n\n        return context.sync().then(() => {\n          resolve(\"Data updated successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when updating data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function insertDataTable(sheetName, tableName, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo một mảng mới cho hàng cần thêm\n        let newRow = new Array(headerRow.length).fill(\"\");\n\n        // Cập nhật các giá trị từ updateDict\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = headerRow.indexOf(columnName);\n            if (columnIndex !== -1) {\n              newRow[columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Thêm hàng mới vào cuối table\n        table.rows.add(null, [newRow]);\n\n        return context.sync().then(() => {\n          resolve(\"Data inserted successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when inserting data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function mapData(\n  SheetNameSource,\n  TableNameSource,\n  KeyColumnNameSource,\n  ListColumnNameSource,\n  SheetNameTarget,\n  TableNameTarget,\n  KeyColumnNameTarget,\n  ListColumnNameTarget\n) {\n  return Excel.run((context) => {\n    const sourceSheet = context.workbook.worksheets.getItem(SheetNameSource);\n    const sourceTable = sourceSheet.tables.getItem(TableNameSource);\n    const targetSheet = context.workbook.worksheets.getItem(SheetNameTarget);\n    const targetTable = targetSheet.tables.getItem(TableNameTarget);\n\n    // Load the data from source and target tables\n    const sourceRange = sourceTable.getDataBodyRange();\n    const targetRange = targetTable.getDataBodyRange();\n\n    sourceRange.load(\"values\");\n    targetRange.load(\"values\");\n\n    // Load header rows\n    const sourceHeaderRange = sourceTable.getHeaderRowRange();\n    const targetHeaderRange = targetTable.getHeaderRowRange();\n    sourceHeaderRange.load(\"values\");\n    targetHeaderRange.load(\"values\");\n\n    return context\n      .sync()\n      .then(() => {\n        const sourceData = sourceRange.values;\n        const targetData = targetRange.values;\n        const targetKeys = new Set(targetData.map((row) => row[0])); // Assuming KeyColumnNameTarget is the first column\n\n        // Get indexes for columns\n        const headersSource = sourceHeaderRange.values[0];\n        const headersTarget = targetHeaderRange.values[0];\n        const keyColIndexSource = headersSource.indexOf(KeyColumnNameSource);\n        const listColIndexesSource = ListColumnNameSource.map((col) => headersSource.indexOf(col));\n        const keyColIndexTarget = headersTarget.indexOf(KeyColumnNameTarget);\n        const listColIndexesTarget = ListColumnNameTarget.map((col) => headersTarget.indexOf(col));\n\n        const newRows = [];\n\n        // Loop through source data to find new entries\n        sourceData.forEach((row) => {\n          const keyValue = row[keyColIndexSource];\n\n          if (!targetKeys.has(keyValue)) {\n            let newRow = new Array(headersTarget.length).fill(\"\");\n            listColIndexesSource.forEach((sourceIndex, index) => {\n              const targetIndex = listColIndexesTarget[index];\n              newRow[targetIndex] = row[sourceIndex];\n            });\n            newRows.push(newRow);\n          }\n          // else {\n          //   const taskIndex = targetData.findIndex((row) => row[keyColIndexTarget] === keyValue);\n          //   if (taskIndex !== -1) {\n          //     const updatedRow = [...targetData[taskIndex]];\n          //     listColIndexesSource.forEach((sourceIndex, index) => {\n          //       const targetIndex = listColIndexesTarget[index];\n          //       updatedRow[targetIndex] = row[sourceIndex];\n          //     });\n          //     targetRange.getRow(taskIndex).values = [updatedRow];\n          //   }\n          // }\n        });\n\n        // If there are new rows to insert, add them to the target table\n        if (newRows.length > 0) {\n          targetTable.rows.add(null, newRows);\n          return context.sync().then(() => {\n            console.log(\"Mapping completed. New rows inserted:\", newRows.length);\n          });\n        } else {\n          console.log(\"No new rows to insert.\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n}\n\nexport function openHtmlFile(filePath) {\n  Office.context.ui.displayDialogAsync(filePath, { height: 50, width: 50 }, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to open dialog: \" + asyncResult.error.message);\n    } else {\n      console.log(\"Dialog opened successfully.\");\n      var dialog = asyncResult.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (message) {\n        console.log(\"Message from dialog: \" + message.message);\n      });\n      dialog.addEventHandler(Office.EventType.DialogEventReceived, function (event) {\n        console.log(\"Dialog event received: \" + event.error);\n      });\n    }\n  });\n}\n\n// Function to convert a 2D array into JSON format\nexport function convertToJSON(array) {\n  // Extract the first row of the array as headers (keys for the JSON objects)\n  const headers = array[0];\n  // Extract the rest of the rows as data\n  const data = array.slice(1);\n\n  // Map through each row in the data array\n  return data.map((row) => {\n    let obj = {};\n    // Iterate over each value in the row and assign it to the corresponding header\n    row.forEach((value, index) => {\n      obj[headers[index]] = value; // Assign the value to the corresponding key (header)\n    });\n    return obj; // Return the object for each row\n  });\n}\n\nexport function isValidURL(text) {\n  const urlPattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n      \"((([a-zA-Z\\\\d]([a-zA-Z\\\\d-]*[a-zA-Z\\\\d])*)\\\\.)+[a-zA-Z]{2,}|\" + // domain name\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n      \"(\\\\:\\\\d+)?(\\\\/[-a-zA-Z\\\\d%_.~+]*)*\" + // port and path\n      \"(\\\\?[;&a-zA-Z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-zA-Z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!urlPattern.test(text);\n}\n\n/*Function for timesheet*/\nexport async function logWork(data) {\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let rowIndex = -1;\n      let message = \"\";\n      // for (let i = 0; i < rows.items.length; i++) {\n      //   const row = rows.items[i].values[0];\n\n      //   if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n      //     rowIndex = i;\n      //     break;\n      //   }\n      // }\n\n      if (Number(data.rowIndex) !== -1) {\n        updateTimeSheet(context, table, data);\n        message = \"Time sheet updated successfully.\";\n      } else {\n        insertTimeSheet(context, table, data);\n        message = \"New time sheet entry added successfully.\";\n      }\n\n      await context.sync();\n      showNotification(message, \"success\");\n    });\n  } catch (error) {\n    console.error(error);\n    showNotification(\"Time sheet update failed.\" + error + \"with data: \" + JSON.stringify(data), \"error\");\n  }\n}\n\nfunction updateTimeSheet(context, table, data) {\n  const row = table.rows.getItemAt(Number(data.rowIndex));\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  row.values = [[null, null, null, data.startTime, data.endTime, totalTime, data.desc]];\n}\n\nfunction insertTimeSheet(context, table, data) {\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  table.rows.add(null, [[data.date, data.taskID, data.pic, data.startTime, data.endTime, totalTime, data.desc]]);\n}\nexport function calculateWorkTime(startTime, endTime) {\n  // Kiểm tra nếu startTime và endTime đều không rỗng\n  if (startTime && endTime) {\n    // Chuyển đổi thời gian từ chuỗi sang đối tượng Date\n    const start = new Date(`1970-01-01T${startTime}:00`);\n    const end = new Date(`1970-01-01T${endTime}:00`);\n    const lunchStart = new Date(`1970-01-01T12:00:00`);\n    const lunchEnd = new Date(`1970-01-01T13:00:00`);\n\n    // Tính toán thời gian làm việc\n    let totalTime = (end - start) / (1000 * 60 * 60); // Chuyển sang giờ\n\n    // Trừ thời gian nghỉ trưa nếu nó nằm trong khoảng thời gian làm việc\n    if (start < lunchStart && end > lunchEnd) {\n      totalTime -= 1; // Trừ 1 giờ nghỉ trưa\n    } else if (start < lunchEnd && end > lunchEnd) {\n      totalTime -= (lunchEnd - start) / (1000 * 60 * 60); // Trừ thời gian từ start đến hết nghỉ trưa\n    } else if (start < lunchStart && end > lunchStart) {\n      totalTime -= (end - lunchStart) / (1000 * 60 * 60); // Trừ thời gian từ bắt đầu nghỉ trưa đến end\n    }\n\n    return totalTime;\n  } else {\n    return 0; // Nếu startTime hoặc endTime rỗng, trả về 0\n  }\n}\nexport async function checkTaskIdExists(data) {\n  try {\n    return await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let result = {\n        rowIndex: -1,\n        startTime: null,\n        endTime: null,\n      };\n      for (let i = 0; i < rows.items.length; i++) {\n        const row = rows.items[i].values[0];\n        if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n          result.rowIndex = i;\n          result.startTime = row[3];\n          result.endTime = row[4];\n          break;\n        }\n      }\n\n      return result;\n    });\n  } catch (error) {\n    console.error(error);\n    return {\n      rowIndex: -1,\n      startTime: null,\n      endTime: null,\n    };\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/* global console, document, Excel, Office, google */\n\nimport { convertToJSON, getDataTable, isValidURL } from \"../commons/common.js\";\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    (async () => {\n      const data = await loadData();\n      const jsonData = convertToJSON(data);\n      const pj_infor = jsonData.filter((item) => item[\"Key\"] === \"PJ_Infor\");\n      document.getElementById(\"pj_information\").innerHTML = generateTableHTML(pj_infor);\n\n      const pj_rule = jsonData.filter((item) => item[\"Key\"] === \"PJ_Rule\");\n      document.getElementById(\"pj_rule\").innerHTML = generateTableHTML(pj_rule);\n\n      const pj_mail = jsonData.filter((item) => item[\"Key\"] === \"PJ_Mail\");\n      document.getElementById(\"pj_mail\").innerHTML = generateTableHTML(pj_mail);\n\n      const pj_report = jsonData.filter((item) => item[\"Key\"] === \"PJ_Report\");\n      document.getElementById(\"pj_report\").innerHTML = generateTableHTML(pj_report);\n\n      const pj_process = jsonData.filter((item) => item[\"Key\"] === \"PJ_Process\");\n      document.getElementById(\"pj_process\").innerHTML = generateTableHTML(pj_process);\n\n      addEventListeners();\n    })();\n  }\n});\n\nasync function loadData() {\n  const data = await getDataTable(\"Setting\", \"TblMaster\");\n  return data;\n}\n\nfunction generateTableHTML(data) {\n  if (!data || data.length === 0) return \"<p>No data available</p>\";\n\n  let tableHTML = \"<table class='table table-bordered'><tbody>\";\n\n  // Tạo các dòng dữ liệu\n  data.forEach((item, index) => {\n    tableHTML += \"<tr>\";\n    tableHTML += `<th>${item.Label}</th>`;\n    if (isValidURL(item.Text)) {\n      tableHTML += `<td colspan=\"2\"><div class=\"d-flex\"><span class=\"text-left\"><a href=\"${item.Text}\" target=\"_blank\">${item.Text}</a></span> <div class=\"d-flex\"><button class=\"copy-btn\" data-text=\"${item.Text}\"><i class=\"bi bi-clipboard icon-right\"></i></button></div></div></td>`;\n    } else {\n      tableHTML += `<td colspan=\"2\"><div class=\"d-flex\"><span class=\"text-left\">${item.Text}</span> <div class=\"d-flex\"><button class=\"copy-btn\" data-text=\"${item.Text}\"><i class=\"bi bi-clipboard icon-right\"></i></button></div></div></td>`;\n    }\n    tableHTML += \"</tr>\";\n  });\n\n  tableHTML += \"</tbody></table>\";\n  return tableHTML;\n}\n\nasync function copyToClipboard(text) {\n  try {\n    await navigator.clipboard.writeText(text);\n    alert(\"Copied to clipboard: \" + text);\n  } catch (err) {\n    console.error(\"Failed to copy: \", err);\n  }\n}\n\nfunction addEventListeners() {\n  document.addEventListener(\"click\", (event) => {\n    if (event.target && event.target.closest(\".copy-btn\")) {\n      const button = event.target.closest(\".copy-btn\");\n      const textToCopy = button.getAttribute(\"data-text\");\n      copyToClipboard(textToCopy);\n    }\n  });\n}\n"],"names":["async","getDataTable","sheetName","tableName","Excel","run","range","context","workbook","worksheets","getItem","tables","getRange","load","sync","values","error","message","type","notificationEl","document","getElementById","textContent","className","style","display","setTimeout","showNotification","convertToJSON","array","headers","slice","map","row","obj","forEach","value","index","isValidURL","text","RegExp","test","Object","freeze","OPEN","IN_PROGRESS","WAITING_REVIEW","WAITING_RELEASE","RELEASED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","generateTableHTML","data","length","tableHTML","item","Label","Text","Office","onReady","info","host","HostType","loadData","jsonData","pj_infor","filter","innerHTML","pj_rule","pj_mail","pj_report","pj_process","addEventListener","event","target","closest","navigator","clipboard","writeText","alert","err","console","copyToClipboard","getAttribute"],"sourceRoot":""}