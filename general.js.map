{"version":3,"file":"general.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commons/common.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/./src/general/home.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n/* global bootstrap */\n\nexport const STATUS = Object.freeze({\n  OPEN: \"OPEN\",\n  IN_PROGRESS: \"IN_PROGRESS\",\n  WAITING_REVIEW: \"WAITING_REVIEW\",\n  WAITING_RELEASE: \"WAITING_RELEASE\",\n  RELEASED: \"RELEASED\",\n});\n\n/**\n * Converts a JavaScript Date string to an Excel date number.\n * @param {string} dateString - The date string in 'YYYY-MM-DD' format.\n * @returns {number} The Excel date number.\n */\nexport function jsDateToExcelDate(dateString) {\n  // Convert the date string to a JavaScript Date object\n  const date = new Date(dateString);\n  // Convert JavaScript Date to Excel date number\n  let excelDate = 25569.0 + (date.getTime() - date.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24);\n  return excelDate;\n}\n\n/**\n * Converts an Excel date number to a JavaScript Date object.\n * @param {number} excelDate - The Excel date number.\n * @returns {string} The date in 'YYYY-MM-DD' format, or an empty string if input is invalid.\n */\nexport function excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\nexport function convertDecimalToTime(decimal) {\n  const totalMinutes = Math.round(decimal * 24 * 60);\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n\n  const formattedHours = String(hours).padStart(2, \"0\");\n  const formattedMinutes = String(minutes).padStart(2, \"0\");\n\n  return `${formattedHours}:${formattedMinutes}`;\n}\n\n/**\n * Displays a notification message to the user.\n * @param {string} message - The message to display.\n * @param {string} type - The type of notification (e.g., 'success', 'error', 'warning').\n */\nexport function showNotification(message, type) {\n  // Get the notification element\n  const notificationEl = document.getElementById(\"notification\");\n\n  // Set the message content\n  notificationEl.textContent = message;\n\n  // Set the CSS classes for styling and positioning\n  notificationEl.className = `alert alert-${type}`;\n\n  // Make the notification visible\n  notificationEl.style.display = \"block\";\n\n  // Hide the notification after 5 seconds\n  setTimeout(() => {\n    notificationEl.style.display = \"none\";\n  }, 10000);\n}\n\nexport async function getDataTable(sheetName, tableName) {\n  try {\n    return await Excel.run(async (context) => {\n      // Get the specified sheet\n      const sheet = context.workbook.worksheets.getItem(sheetName);\n      // Get the specified table\n      const table = sheet.tables.getItem(tableName);\n      // Load the header row\n      const range = table.getRange();\n      range.load(\"values\");\n\n      await context.sync();\n      return range.values; // Trả về dữ liệu\n    });\n  } catch (error) {\n    showNotification(\"Error when reading data from \" + sheetName + \": \" + error.message, \"danger\");\n    throw error; // Ném lỗi để xử lý bên ngoài\n  }\n}\n\nexport async function getDataHeader(sheetName, tableName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0];\n  } catch (error) {\n    showNotification(\"Error when reading data from\" + sheetName + \": \" + error.message, \"danger\");\n  }\n}\n\nexport async function getIndexByColumnName(sheetName, tableName, columnName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0].indexOf(columnName);\n  } catch (error) {\n    return -1;\n  }\n}\n\nexport function getIndexRowbyTaskId(data, taskId) {\n  try {\n    const taskIndex = data.findIndex((row) => row[0] === taskId); // Tìm index của task\n    return taskIndex;\n  } catch (error) {\n    return -1;\n  }\n}\nexport function updateDataTable(sheetName, tableName, rowIndex, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo map từ tên cột đến index\n        let columnIndexMap = {};\n        headerRow.forEach((columnName, index) => {\n          columnIndexMap[columnName] = index;\n        });\n\n        // Cập nhật các giá trị tại vị trí chỉ định\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = columnIndexMap[columnName];\n            if (columnIndex !== undefined) {\n              range.values[rowIndex][columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Chỉ cập nhật đúng range ứng với rowIndex\n        let rowRange = table.getDataBodyRange().getRow(rowIndex);\n        rowRange.values = [range.values[rowIndex]];\n\n        return context.sync().then(() => {\n          resolve(\"Data updated successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when updating data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function insertDataTable(sheetName, tableName, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo một mảng mới cho hàng cần thêm\n        let newRow = new Array(headerRow.length).fill(\"\");\n\n        // Cập nhật các giá trị từ updateDict\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = headerRow.indexOf(columnName);\n            if (columnIndex !== -1) {\n              newRow[columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Thêm hàng mới vào cuối table\n        table.rows.add(null, [newRow]);\n\n        return context.sync().then(() => {\n          resolve(\"Data inserted successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when inserting data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function mapData(\n  SheetNameSource,\n  TableNameSource,\n  KeyColumnNameSource,\n  ListColumnNameSource,\n  SheetNameTarget,\n  TableNameTarget,\n  KeyColumnNameTarget,\n  ListColumnNameTarget\n) {\n  return Excel.run((context) => {\n    const sourceSheet = context.workbook.worksheets.getItem(SheetNameSource);\n    const sourceTable = sourceSheet.tables.getItem(TableNameSource);\n    const targetSheet = context.workbook.worksheets.getItem(SheetNameTarget);\n    const targetTable = targetSheet.tables.getItem(TableNameTarget);\n\n    // Load the data from source and target tables\n    const sourceRange = sourceTable.getDataBodyRange();\n    const targetRange = targetTable.getDataBodyRange();\n\n    sourceRange.load(\"values\");\n    targetRange.load(\"values\");\n\n    // Load header rows\n    const sourceHeaderRange = sourceTable.getHeaderRowRange();\n    const targetHeaderRange = targetTable.getHeaderRowRange();\n    sourceHeaderRange.load(\"values\");\n    targetHeaderRange.load(\"values\");\n\n    return context\n      .sync()\n      .then(() => {\n        const sourceData = sourceRange.values;\n        const targetData = targetRange.values;\n        const targetKeys = new Set(targetData.map((row) => row[0])); // Assuming KeyColumnNameTarget is the first column\n\n        // Get indexes for columns\n        const headersSource = sourceHeaderRange.values[0];\n        const headersTarget = targetHeaderRange.values[0];\n        const keyColIndexSource = headersSource.indexOf(KeyColumnNameSource);\n        const listColIndexesSource = ListColumnNameSource.map((col) => headersSource.indexOf(col));\n        const keyColIndexTarget = headersTarget.indexOf(KeyColumnNameTarget);\n        const listColIndexesTarget = ListColumnNameTarget.map((col) => headersTarget.indexOf(col));\n\n        const newRows = [];\n\n        // Loop through source data to find new entries\n        sourceData.forEach((row) => {\n          const keyValue = row[keyColIndexSource];\n\n          if (!targetKeys.has(keyValue)) {\n            let newRow = new Array(headersTarget.length).fill(\"\");\n            listColIndexesSource.forEach((sourceIndex, index) => {\n              const targetIndex = listColIndexesTarget[index];\n              newRow[targetIndex] = row[sourceIndex];\n            });\n            newRows.push(newRow);\n          }\n          // else {\n          //   const taskIndex = targetData.findIndex((row) => row[keyColIndexTarget] === keyValue);\n          //   if (taskIndex !== -1) {\n          //     const updatedRow = [...targetData[taskIndex]];\n          //     listColIndexesSource.forEach((sourceIndex, index) => {\n          //       const targetIndex = listColIndexesTarget[index];\n          //       updatedRow[targetIndex] = row[sourceIndex];\n          //     });\n          //     targetRange.getRow(taskIndex).values = [updatedRow];\n          //   }\n          // }\n        });\n\n        // If there are new rows to insert, add them to the target table\n        if (newRows.length > 0) {\n          targetTable.rows.add(null, newRows);\n          return context.sync().then(() => {\n            console.log(\"Mapping completed. New rows inserted:\", newRows.length);\n          });\n        } else {\n          console.log(\"No new rows to insert.\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n}\n\nexport function openHtmlFile(filePath) {\n  Office.context.ui.displayDialogAsync(filePath, { height: 50, width: 50 }, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to open dialog: \" + asyncResult.error.message);\n    } else {\n      console.log(\"Dialog opened successfully.\");\n      var dialog = asyncResult.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (message) {\n        console.log(\"Message from dialog: \" + message.message);\n      });\n      dialog.addEventHandler(Office.EventType.DialogEventReceived, function (event) {\n        console.log(\"Dialog event received: \" + event.error);\n      });\n    }\n  });\n}\n\n// Function to convert a 2D array into JSON format\nexport function convertToJSON(array) {\n  // Extract the first row of the array as headers (keys for the JSON objects)\n  const headers = array[0];\n  // Extract the rest of the rows as data\n  const data = array.slice(1);\n\n  // Map through each row in the data array\n  return data.map((row) => {\n    let obj = {};\n    // Iterate over each value in the row and assign it to the corresponding header\n    row.forEach((value, index) => {\n      obj[headers[index]] = value; // Assign the value to the corresponding key (header)\n    });\n    return obj; // Return the object for each row\n  });\n}\n\nexport function isValidURL(text) {\n  const urlPattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n      \"((([a-zA-Z\\\\d]([a-zA-Z\\\\d-]*[a-zA-Z\\\\d])*)\\\\.)+[a-zA-Z]{2,}|\" + // domain name\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n      \"(\\\\:\\\\d+)?(\\\\/[-a-zA-Z\\\\d%_.~+]*)*\" + // port and path\n      \"(\\\\?[;&a-zA-Z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-zA-Z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!urlPattern.test(text);\n}\n\n/*Function for timesheet*/\nexport async function logWork(data) {\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let rowIndex = -1;\n      let message = \"\";\n      // for (let i = 0; i < rows.items.length; i++) {\n      //   const row = rows.items[i].values[0];\n\n      //   if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n      //     rowIndex = i;\n      //     break;\n      //   }\n      // }\n\n      if (Number(data.rowIndex) !== -1) {\n        updateTimeSheet(context, table, data);\n        message = \"Time sheet updated successfully.\";\n      } else {\n        insertTimeSheet(context, table, data);\n        message = \"New time sheet entry added successfully.\";\n      }\n\n      await context.sync();\n      showNotification(message, \"success\");\n    });\n  } catch (error) {\n    console.error(error);\n    showNotification(\"Time sheet update failed.\" + error + \"with data: \" + JSON.stringify(data), \"error\");\n  }\n}\n\nfunction updateTimeSheet(context, table, data) {\n  const row = table.rows.getItemAt(Number(data.rowIndex));\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  row.values = [[null, null, null, data.startTime, data.endTime, totalTime, data.desc]];\n}\n\nfunction insertTimeSheet(context, table, data) {\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  table.rows.add(null, [[data.date, data.taskID, data.pic, data.startTime, data.endTime, totalTime, data.desc]]);\n}\nexport function calculateWorkTime(startTime, endTime) {\n  // Kiểm tra nếu startTime và endTime đều không rỗng\n  if ((startTime && endTime) || (startTime === \"00:00\" && endTime === \"00:00\")) {\n    // Chuyển đổi thời gian từ chuỗi sang đối tượng Date\n    const start = new Date(`1970-01-01T${startTime}:00`);\n    const end = new Date(`1970-01-01T${endTime}:00`);\n    const lunchStart = new Date(`1970-01-01T12:00:00`);\n    const lunchEnd = new Date(`1970-01-01T13:00:00`);\n\n    // Tính toán thời gian làm việc\n    let totalTime = (end - start) / (1000 * 60 * 60); // Chuyển sang giờ\n\n    // Trừ thời gian nghỉ trưa nếu nó nằm trong khoảng thời gian làm việc\n    if (start < lunchStart && end > lunchEnd) {\n      totalTime -= 1; // Trừ 1 giờ nghỉ trưa\n    } else if (start < lunchEnd && end > lunchEnd) {\n      totalTime -= (lunchEnd - start) / (1000 * 60 * 60); // Trừ thời gian từ start đến hết nghỉ trưa\n    } else if (start < lunchStart && end > lunchStart) {\n      totalTime -= (end - lunchStart) / (1000 * 60 * 60); // Trừ thời gian từ bắt đầu nghỉ trưa đến end\n    }\n\n    return totalTime;\n  } else {\n    return 0; // Nếu startTime hoặc endTime rỗng, trả về 0\n  }\n}\nexport async function checkTaskIdExists(data) {\n  try {\n    return await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let result = {\n        rowIndex: -1,\n        startTime: null,\n        endTime: null,\n      };\n      for (let i = 0; i < rows.items.length; i++) {\n        const row = rows.items[i].values[0];\n        if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n          result.rowIndex = i;\n          result.startTime = row[3];\n          result.endTime = row[4];\n          break;\n        }\n      }\n\n      return result;\n    });\n  } catch (error) {\n    console.error(error);\n    return {\n      rowIndex: -1,\n      startTime: null,\n      endTime: null,\n    };\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/* global console, document, Excel, Office, google */\n\nimport { convertToJSON, getDataTable, isValidURL } from \"../commons/common.js\";\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    (async () => {\n      const data = await loadData();\n      const jsonData = convertToJSON(data);\n      const pj_infor = jsonData.filter((item) => item[\"Key\"] === \"PJ_Infor\");\n      document.getElementById(\"pj_information\").innerHTML = generateTableHTML(pj_infor);\n\n      const pj_rule = jsonData.filter((item) => item[\"Key\"] === \"PJ_Rule\");\n      document.getElementById(\"pj_rule\").innerHTML = generateTableHTML(pj_rule);\n\n      const pj_mail = jsonData.filter((item) => item[\"Key\"] === \"PJ_Mail\");\n      document.getElementById(\"pj_mail\").innerHTML = generateTableHTML(pj_mail);\n\n      const pj_report = jsonData.filter((item) => item[\"Key\"] === \"PJ_Report\");\n      document.getElementById(\"pj_report\").innerHTML = generateTableHTML(pj_report);\n\n      const pj_process = jsonData.filter((item) => item[\"Key\"] === \"PJ_Process\");\n      document.getElementById(\"pj_process\").innerHTML = generateTableHTML(pj_process);\n\n      addEventListeners();\n    })();\n  }\n});\n\nasync function loadData() {\n  const data = await getDataTable(\"Setting\", \"TblMaster\");\n  return data;\n}\n\nfunction generateTableHTML(data) {\n  if (!data || data.length === 0) return \"<p>No data available</p>\";\n\n  let tableHTML = \"<table class='table table-bordered'><tbody>\";\n\n  // Tạo các dòng dữ liệu\n  data.forEach((item, index) => {\n    tableHTML += \"<tr>\";\n    tableHTML += `<th>${item.Label}</th>`;\n    if (isValidURL(item.Text)) {\n      tableHTML += `<td colspan=\"2\"><div class=\"d-flex\"><span class=\"text-left\"><a href=\"${item.Text}\" target=\"_blank\">${item.Text}</a></span> <div class=\"d-flex\"><button class=\"copy-btn\" data-text=\"${item.Text}\"><i class=\"bi bi-clipboard icon-right\"></i></button></div></div></td>`;\n    } else {\n      tableHTML += `<td colspan=\"2\"><div class=\"d-flex\"><span class=\"text-left\">${item.Text}</span> <div class=\"d-flex\"><button class=\"copy-btn\" data-text=\"${item.Text}\"><i class=\"bi bi-clipboard icon-right\"></i></button></div></div></td>`;\n    }\n    tableHTML += \"</tr>\";\n  });\n\n  tableHTML += \"</tbody></table>\";\n  return tableHTML;\n}\n\nasync function copyToClipboard(text) {\n  try {\n    await navigator.clipboard.writeText(text);\n    alert(\"Copied to clipboard: \" + text);\n  } catch (err) {\n    console.error(\"Failed to copy: \", err);\n  }\n}\n\nfunction addEventListeners() {\n  document.addEventListener(\"click\", (event) => {\n    if (event.target && event.target.closest(\".copy-btn\")) {\n      const button = event.target.closest(\".copy-btn\");\n      const textToCopy = button.getAttribute(\"data-text\");\n      copyToClipboard(textToCopy);\n    }\n  });\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","showNotification","message","notificationEl","document","getElementById","textContent","className","concat","style","display","setTimeout","getDataTable","_x","_x2","_getDataTable","_callee2","sheetName","tableName","_context2","Excel","run","_ref","_callee","context","sheet","table","range","_context","workbook","worksheets","getItem","tables","getRange","load","sync","_x10","t0","convertToJSON","array","headers","map","row","obj","index","isValidURL","text","RegExp","test","freeze","OPEN","IN_PROGRESS","WAITING_REVIEW","WAITING_RELEASE","RELEASED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","get","prop","loadData","_loadData","data","generateTableHTML","tableHTML","item","Label","Text","_copyToClipboard","_callee3","_context3","navigator","clipboard","writeText","alert","console","error","Office","onReady","info","host","HostType","jsonData","pj_infor","pj_rule","pj_mail","pj_report","pj_process","filter","innerHTML","addEventListener","event","target","closest","copyToClipboard","getAttribute"],"sourceRoot":""}