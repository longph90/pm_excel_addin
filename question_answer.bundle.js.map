{"version":3,"file":"question_answer.bundle.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/commons/common.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/./src/question_answer/qa_information.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n/* global bootstrap */\n\nexport const STATUS = Object.freeze({\n  OPEN: \"OPEN\",\n  IN_PROGRESS: \"IN_PROGRESS\",\n  WAITING_REVIEW: \"WAITING_REVIEW\",\n  WAITING_RELEASE: \"WAITING_RELEASE\",\n  RELEASED: \"RELEASED\",\n});\n\n/**\n * Converts a JavaScript Date string to an Excel date number.\n * @param {string} dateString - The date string in 'YYYY-MM-DD' format.\n * @returns {number} The Excel date number.\n */\nexport function jsDateToExcelDate(dateString) {\n  // Convert the date string to a JavaScript Date object\n  const date = new Date(dateString);\n  // Convert JavaScript Date to Excel date number\n  let excelDate = 25569.0 + (date.getTime() - date.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24);\n  return excelDate;\n}\n\n/**\n * Converts an Excel date number to a JavaScript Date object.\n * @param {number} excelDate - The Excel date number.\n * @returns {string} The date in 'YYYY-MM-DD' format, or an empty string if input is invalid.\n */\nexport function excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\nexport function convertDecimalToTime(decimal) {\n  if (decimal === null || decimal === \"\") return \"\";\n  const totalMinutes = Math.round(decimal * 24 * 60);\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n\n  const formattedHours = String(hours).padStart(2, \"0\");\n  const formattedMinutes = String(minutes).padStart(2, \"0\");\n\n  return `${formattedHours}:${formattedMinutes}`;\n}\n\n/**\n * Displays a notification message to the user.\n * @param {string} message - The message to display.\n * @param {string} type - The type of notification (e.g., 'success', 'error', 'warning').\n */\nexport function showNotification(message, type) {\n  // Get the notification element\n  const notificationEl = document.getElementById(\"notification\");\n\n  // Set the message content\n  notificationEl.textContent = message;\n\n  // Set the CSS classes for styling and positioning\n  notificationEl.className = `alert alert-${type}`;\n\n  // Make the notification visible\n  notificationEl.style.display = \"block\";\n\n  // Hide the notification after 5 seconds\n  setTimeout(() => {\n    notificationEl.style.display = \"none\";\n  }, 10000);\n}\n\nexport async function getDataTable(sheetName, tableName) {\n  try {\n    return await Excel.run(async (context) => {\n      // Get the specified sheet\n      const sheet = context.workbook.worksheets.getItem(sheetName);\n      // Get the specified table\n      const table = sheet.tables.getItem(tableName);\n      // Load the header row\n      const range = table.getRange();\n      range.load(\"values\");\n\n      await context.sync();\n      return range.values; // Trả về dữ liệu\n    });\n  } catch (error) {\n    showNotification(\"Error when reading data from \" + sheetName + \": \" + error.message, \"danger\");\n    throw error; // Ném lỗi để xử lý bên ngoài\n  }\n}\n\nexport async function getDataHeader(sheetName, tableName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0];\n  } catch (error) {\n    showNotification(\"Error when reading data from\" + sheetName + \": \" + error.message, \"danger\");\n  }\n}\n\nexport async function getIndexByColumnName(sheetName, tableName, columnName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0].indexOf(columnName);\n  } catch (error) {\n    return -1;\n  }\n}\n\nexport function getIndexRowbyTaskId(data, taskId) {\n  try {\n    const taskIndex = data.findIndex((row) => row[0] === taskId); // Tìm index của task\n    return taskIndex;\n  } catch (error) {\n    return -1;\n  }\n}\nexport function updateDataTable(sheetName, tableName, rowIndex, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo map từ tên cột đến index\n        let columnIndexMap = {};\n        headerRow.forEach((columnName, index) => {\n          columnIndexMap[columnName] = index;\n        });\n\n        // Cập nhật các giá trị tại vị trí chỉ định\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = columnIndexMap[columnName];\n            if (columnIndex !== undefined) {\n              range.values[rowIndex][columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Chỉ cập nhật đúng range ứng với rowIndex\n        let rowRange = table.getDataBodyRange().getRow(rowIndex);\n        rowRange.values = [range.values[rowIndex]];\n\n        return context.sync().then(() => {\n          resolve(\"Data updated successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when updating data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function insertDataTable(sheetName, tableName, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo một mảng mới cho hàng cần thêm\n        let newRow = new Array(headerRow.length).fill(\"\");\n\n        // Cập nhật các giá trị từ updateDict\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = headerRow.indexOf(columnName);\n            if (columnIndex !== -1) {\n              newRow[columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Thêm hàng mới vào cuối table\n        table.rows.add(null, [newRow]);\n\n        return context.sync().then(() => {\n          resolve(\"Data inserted successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when inserting data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function mapData(\n  SheetNameSource,\n  TableNameSource,\n  KeyColumnNameSource,\n  ListColumnNameSource,\n  SheetNameTarget,\n  TableNameTarget,\n  KeyColumnNameTarget,\n  ListColumnNameTarget\n) {\n  return Excel.run((context) => {\n    const sourceSheet = context.workbook.worksheets.getItem(SheetNameSource);\n    const sourceTable = sourceSheet.tables.getItem(TableNameSource);\n    const targetSheet = context.workbook.worksheets.getItem(SheetNameTarget);\n    const targetTable = targetSheet.tables.getItem(TableNameTarget);\n\n    // Load the data from source and target tables\n    const sourceRange = sourceTable.getDataBodyRange();\n    const targetRange = targetTable.getDataBodyRange();\n\n    sourceRange.load(\"values\");\n    targetRange.load(\"values\");\n\n    // Load header rows\n    const sourceHeaderRange = sourceTable.getHeaderRowRange();\n    const targetHeaderRange = targetTable.getHeaderRowRange();\n    sourceHeaderRange.load(\"values\");\n    targetHeaderRange.load(\"values\");\n\n    return context\n      .sync()\n      .then(() => {\n        const sourceData = sourceRange.values;\n        const targetData = targetRange.values;\n        const targetKeys = new Set(targetData.map((row) => row[0])); // Assuming KeyColumnNameTarget is the first column\n\n        // Get indexes for columns\n        const headersSource = sourceHeaderRange.values[0];\n        const headersTarget = targetHeaderRange.values[0];\n        const keyColIndexSource = headersSource.indexOf(KeyColumnNameSource);\n        const listColIndexesSource = ListColumnNameSource.map((col) => headersSource.indexOf(col));\n        const keyColIndexTarget = headersTarget.indexOf(KeyColumnNameTarget);\n        const listColIndexesTarget = ListColumnNameTarget.map((col) => headersTarget.indexOf(col));\n\n        const newRows = [];\n\n        // Loop through source data to find new entries\n        sourceData.forEach((row) => {\n          const keyValue = row[keyColIndexSource];\n\n          if (!targetKeys.has(keyValue)) {\n            let newRow = new Array(headersTarget.length).fill(\"\");\n            listColIndexesSource.forEach((sourceIndex, index) => {\n              const targetIndex = listColIndexesTarget[index];\n              newRow[targetIndex] = row[sourceIndex];\n            });\n            newRows.push(newRow);\n          }\n          // else {\n          //   const taskIndex = targetData.findIndex((row) => row[keyColIndexTarget] === keyValue);\n          //   if (taskIndex !== -1) {\n          //     const updatedRow = [...targetData[taskIndex]];\n          //     listColIndexesSource.forEach((sourceIndex, index) => {\n          //       const targetIndex = listColIndexesTarget[index];\n          //       updatedRow[targetIndex] = row[sourceIndex];\n          //     });\n          //     targetRange.getRow(taskIndex).values = [updatedRow];\n          //   }\n          // }\n        });\n\n        // If there are new rows to insert, add them to the target table\n        if (newRows.length > 0) {\n          targetTable.rows.add(null, newRows);\n          return context.sync().then(() => {\n            console.log(\"Mapping completed. New rows inserted:\", newRows.length);\n          });\n        } else {\n          console.log(\"No new rows to insert.\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n}\n\nexport function openHtmlFile(filePath) {\n  Office.context.ui.displayDialogAsync(filePath, { height: 50, width: 50 }, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to open dialog: \" + asyncResult.error.message);\n    } else {\n      console.log(\"Dialog opened successfully.\");\n      var dialog = asyncResult.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (message) {\n        console.log(\"Message from dialog: \" + message.message);\n      });\n      dialog.addEventHandler(Office.EventType.DialogEventReceived, function (event) {\n        console.log(\"Dialog event received: \" + event.error);\n      });\n    }\n  });\n}\n\n// Function to convert a 2D array into JSON format\nexport function convertToJSON(array) {\n  // Extract the first row of the array as headers (keys for the JSON objects)\n  const headers = array[0];\n  // Extract the rest of the rows as data\n  const data = array.slice(1);\n\n  // Map through each row in the data array\n  return data.map((row) => {\n    let obj = {};\n    // Iterate over each value in the row and assign it to the corresponding header\n    row.forEach((value, index) => {\n      obj[headers[index]] = value; // Assign the value to the corresponding key (header)\n    });\n    return obj; // Return the object for each row\n  });\n}\n\nexport function isValidURL(text) {\n  const urlPattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n      \"((([a-zA-Z\\\\d]([a-zA-Z\\\\d-]*[a-zA-Z\\\\d])*)\\\\.)+[a-zA-Z]{2,}|\" + // domain name\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n      \"(\\\\:\\\\d+)?(\\\\/[-a-zA-Z\\\\d%_.~+]*)*\" + // port and path\n      \"(\\\\?[;&a-zA-Z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-zA-Z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!urlPattern.test(text);\n}\n\n/*Function for timesheet*/\nexport async function logWork(data) {\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let rowIndex = -1;\n      let message = \"\";\n      // for (let i = 0; i < rows.items.length; i++) {\n      //   const row = rows.items[i].values[0];\n\n      //   if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n      //     rowIndex = i;\n      //     break;\n      //   }\n      // }\n\n      if (Number(data.rowIndex) !== -1) {\n        updateTimeSheet(context, table, data);\n        message = \"Time sheet updated successfully.\";\n      } else {\n        insertTimeSheet(context, table, data);\n        message = \"New time sheet entry added successfully.\";\n      }\n\n      await context.sync();\n      showNotification(message, \"success\");\n    });\n  } catch (error) {\n    console.error(error);\n    showNotification(\"Time sheet update failed.\" + error + \"with data: \" + JSON.stringify(data), \"error\");\n  }\n}\n\nfunction updateTimeSheet(context, table, data) {\n  const row = table.rows.getItemAt(Number(data.rowIndex));\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  row.values = [[null, null, null, data.startTime, data.endTime, totalTime, data.desc]];\n}\n\nfunction insertTimeSheet(context, table, data) {\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  table.rows.add(null, [[data.date, data.taskID, data.pic, data.startTime, data.endTime, totalTime, data.desc]]);\n}\nexport function calculateWorkTime(startTime, endTime) {\n  // Kiểm tra nếu startTime và endTime đều không rỗng\n  if (startTime && endTime) {\n    // Chuyển đổi thời gian từ chuỗi sang đối tượng Date\n    const start = new Date(`1970-01-01T${startTime}:00`);\n    const end = new Date(`1970-01-01T${endTime}:00`);\n    const lunchStart = new Date(`1970-01-01T12:00:00`);\n    const lunchEnd = new Date(`1970-01-01T13:00:00`);\n\n    // Tính toán thời gian làm việc\n    let totalTime = (end - start) / (1000 * 60 * 60); // Chuyển sang giờ\n\n    // Trừ thời gian nghỉ trưa nếu nó nằm trong khoảng thời gian làm việc\n    if (start < lunchStart && end > lunchEnd) {\n      totalTime -= 1; // Trừ 1 giờ nghỉ trưa\n    } else if (start < lunchEnd && end > lunchEnd) {\n      totalTime -= (lunchEnd - start) / (1000 * 60 * 60); // Trừ thời gian từ start đến hết nghỉ trưa\n    } else if (start < lunchStart && end > lunchStart) {\n      totalTime -= (end - lunchStart) / (1000 * 60 * 60); // Trừ thời gian từ bắt đầu nghỉ trưa đến end\n    }\n\n    return totalTime;\n  } else {\n    return 0; // Nếu startTime hoặc endTime rỗng, trả về 0\n  }\n}\nexport async function checkTaskIdExists(data) {\n  try {\n    return await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let result = {\n        rowIndex: -1,\n        startTime: null,\n        endTime: null,\n      };\n      for (let i = 0; i < rows.items.length; i++) {\n        const row = rows.items[i].values[0];\n        if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n          result.rowIndex = i;\n          result.startTime = row[3];\n          result.endTime = row[4];\n          break;\n        }\n      }\n\n      return result;\n    });\n  } catch (error) {\n    console.error(error);\n    return {\n      rowIndex: -1,\n      startTime: null,\n      endTime: null,\n    };\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\nimport { insertDataTable, updateDataTable, getDataTable, openHtmlFile } from \"../commons/common.js\";\n\n/* global console, document, Excel, Office */\n/* global bootstrap */\n// You can specify which plugins you need\n// Get the modal\nvar qaModal = new bootstrap.Modal(document.getElementById(\"qaModal\"));\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    initializeEventHandlers();\n    // Call getDataTable and process the data\n    (async () => {\n      try {\n        const data = await getDataTable(\"Q&A\", \"TblQA\");\n        processAndDisplayData(data);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    })();\n  }\n});\n\nfunction initializeEventHandlers() {\n  // Add event listener for the \"addNewBtn\" button\n  document.getElementById(\"addNewBtn\").addEventListener(\"click\", function () {\n    document.getElementById(\"qaForm\").reset();\n    document.getElementById(\"f_qaid\").readOnly = false;\n    document.getElementById(\"updateBtn\").style.display = \"none\";\n    document.getElementById(\"createBtn\").style.display = \"inline\";\n    qaModal.show();\n  });\n\n  // Add event listener for the \"createBtn\" button\n  document.getElementById(\"createBtn\").addEventListener(\"click\", insertNewQA);\n  document.getElementById(\"updateBtn\").addEventListener(\"click\", updateQA);\n\n  // For Testing\n  // document.getElementById(\"btnTest1\").addEventListener(\"click\", test_insert);\n  // document.getElementById(\"btnTest\").addEventListener(\"click\", function () {\n  //   openHtmlFile(\"https://localhost:3000/calendar.html\");\n  // });\n}\n\n// Hàm lấy index của cột theo tên\nfunction getColumnIndex(columnName) {\n  const headers = [\n    \"ID\",\n    \"TaskID\",\n    \"Status\",\n    \"Question_VN\",\n    \"Question_Date\",\n    \"Raised_Person\",\n    \"Answer_VN\",\n    \"Answer_Date\",\n    \"Answer_Person\",\n    \"Question_JP\",\n    \"Answer_JP\",\n  ];\n  return headers.indexOf(columnName);\n}\n// Function to process and display data\nfunction processAndDisplayData(data) {\n  // Lấy dữ liệu và kèm theo index\n  let total = 0;\n  const taskData = data.map((row, index) => ({\n    index: index,\n    id: row[getColumnIndex(\"ID\")],\n    taskId: row[getColumnIndex(\"TaskID\")],\n    status: row[getColumnIndex(\"Status\")],\n    questionVN: row[getColumnIndex(\"Question_VN\")],\n    questionDate: row[getColumnIndex(\"Question_Date\")],\n    raisedPerson: row[getColumnIndex(\"Raised_Person\")],\n    answerVN: row[getColumnIndex(\"Answer_VN\")],\n    answerDate: row[getColumnIndex(\"Answer_Date\")],\n    answerPerson: row[getColumnIndex(\"Answer_Person\")],\n    questionJP: row[getColumnIndex(\"Question_JP\")],\n    answerJP: row[getColumnIndex(\"Answer_JP\")],\n  }));\n  // document.getElementById(\"test_display\").innerHTML = JSON.stringify(taskData);\n\n  const statusGroups = {\n    Open: [],\n    WaitingClientFeedback: [],\n    WaitingConfirm: [],\n    Confirmed: [],\n    Closed: [],\n  };\n\n  taskData.forEach((task) => {\n    if (statusGroups[task.status]) {\n      total += 1;\n      statusGroups[task.status].push(task);\n    } else {\n      console.warn(`Unknown status: ${task.status}`);\n    }\n  });\n\n  Object.keys(statusGroups).forEach((status) => {\n    const taskList = statusGroups[status];\n    const taskContainer = document.getElementById(`${status.replace(/ /g, \"\")}Tasks`);\n    const taskCount = document.getElementById(`${status.replace(/ /g, \"\")}Count`);\n\n    if (taskList.length > 0) {\n      taskContainer.innerHTML = `\n    <table class='table table-bordered'>\n        <tr>\n            <th>ID</th>\n            <th>TaskID</th>\n            <th>Status</th>\n            <th>Question Date</th>\n            <th>Raised Person</th>\n        </tr>\n        ${taskList\n          .map(\n            (task) => `\n            <tr>\n                <td>\n                    <a href=\"#\" class=\"openModal link-info\" \n                       data-rowIndex=\"${task.index}\" \n                       data-qaid=\"${task.id}\" \n                       data-taskid=\"${task.taskId}\" \n                       data-status=\"${task.status}\" \n                       data-questionVN=\"${task.questionVN}\" \n                       data-questiondate=\"${excelDateToJSDate(task.questionDate)}\" \n                       data-raisedperson=\"${task.raisedPerson}\" \n                       data-answerVN=\"${task.answerVN}\" \n                       data-answerDate=\"${task.answerDate}\" \n                       data-answerPerson=\"${task.answerPerson}\" \n                       data-questionJP=\"${task.questionJP}\" \n                       data-answerJP=\"${task.answerJP}\">\n                        ${task.id}\n                    </a>\n                </td>\n                <td>${task.taskId}</td>\n                <td>${task.status}</td>\n                <td>${excelDateToJSDate(task.questionDate)}</td>\n                <td>${task.raisedPerson}</td>\n            </tr>\n        `\n          )\n          .join(\"\")}\n    </table>\n`;\n    } else {\n      taskContainer.innerHTML = \"No Q&A available.\";\n    }\n\n    taskCount.textContent = taskList.length;\n  });\n\n  const totalCount = document.getElementById(\"totalCount\");\n  totalCount.textContent = total;\n\n  // Add listener\n  const openModalLinks = document.querySelectorAll(\".openModal\");\n  openModalLinks.forEach((link) => {\n    link.addEventListener(\"click\", handleModalOpen);\n  });\n}\n\nfunction handleModalOpen(event) {\n  event.preventDefault();\n  const rowIndex = this.getAttribute(\"data-rowIndex\");\n  const qaid = this.getAttribute(\"data-qaid\");\n  const taskId = this.getAttribute(\"data-taskid\");\n  const status = this.getAttribute(\"data-status\");\n  const questionDate = this.getAttribute(\"data-questiondate\");\n  const raisedPerson = this.getAttribute(\"data-raisedperson\");\n  const questionVN = this.getAttribute(\"data-questionVN\");\n  const questionJP = this.getAttribute(\"data-questionJP\");\n  const answerJP = this.getAttribute(\"data-answerJP\");\n  const answerVN = this.getAttribute(\"data-answerVN\");\n  const answerDate = this.getAttribute(\"data-answerDate\");\n  const answerPerson = this.getAttribute(\"data-answerPerson\");\n\n  document.getElementById(\"f_rowIndex\").value = rowIndex - 1;\n  document.getElementById(\"f_qaid\").value = qaid;\n  document.getElementById(\"f_taskId\").value = taskId;\n  document.getElementById(\"f_status\").value = status;\n  document.getElementById(\"f_questionDate\").value = questionDate;\n  document.getElementById(\"f_raisedPerson\").value = raisedPerson;\n  document.getElementById(\"f_questionVN\").value = questionVN;\n  document.getElementById(\"f_questionJP\").value = questionJP;\n  document.getElementById(\"f_answerJP\").value = answerJP;\n  document.getElementById(\"f_answerVN\").value = answerVN;\n  document.getElementById(\"updateBtn\").style.display = \"inline\";\n  document.getElementById(\"createBtn\").style.display = \"none\";\n  qaModal.show();\n}\n\nfunction excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\n\nfunction genQAId(max) {\n  return max + 1;\n}\n\nfunction insertNewQA() {\n  const formValues = getFormValues();\n\n  const updateDict = {\n    ID: formValues.qaid,\n    TaskID: formValues.taskId,\n    Status: formValues.status,\n    Question_VN: formValues.questionVN,\n    Question_Date: formValues.questionDate,\n    Raised_Person: formValues.raisedPerson,\n    Answer_VN: formValues.answerVN,\n    Answer_Date: formValues.answerVN,\n    Answer_Person: formValues.Answer_Person,\n    Question_JP: formValues.questionJP,\n    Answer_JP: formValues.answerJP,\n  };\n  insertDataTable(\"Q&A\", \"TblQA\", updateDict);\n  qaModal.hide();\n}\n\nfunction updateQA() {\n  const formValues = getFormValues();\n  const rowIndex = Number(formValues.rowIndex);\n  // document.getElementById(\"test_display\").innerHTML = formValues.rowIndex;\n  const updateDict = {\n    ID: formValues.qaid,\n    TaskID: formValues.taskId,\n    Status: formValues.status,\n    Question_VN: formValues.questionVN,\n    Question_Date: formValues.questionDate,\n    Raised_Person: formValues.raisedPerson,\n    Answer_VN: formValues.answerVN,\n    Answer_Date: formValues.answerVN,\n    Answer_Person: formValues.Answer_Person,\n    Question_JP: formValues.questionJP,\n    Answer_JP: formValues.answerJP,\n  };\n  updateDataTable(\"Q&A\", \"TblQA\", rowIndex, updateDict);\n  qaModal.hide();\n}\n\nfunction getFormValues() {\n  return {\n    rowIndex: document.getElementById(\"f_rowIndex\").value,\n    qaid: document.getElementById(\"f_qaid\").value,\n    taskId: document.getElementById(\"f_taskId\").value,\n    status: document.getElementById(\"f_status\").value,\n    questionDate: document.getElementById(\"f_questionDate\").value,\n    raisedPerson: document.getElementById(\"f_raisedPerson\").value,\n    questionVN: document.getElementById(\"f_questionVN\").value,\n    questionJP: document.getElementById(\"f_questionJP\").value,\n    answerJP: document.getElementById(\"f_answerJP\").value,\n    answerVN: document.getElementById(\"f_answerVN\").value,\n  };\n}\n\nfunction test_insert() {\n  const data = {\n    Account: \"Account-01\",\n    FullName: \"Dummy\",\n  };\n  insertDataTable(\"Setting\", \"Table6\", data);\n}\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","showNotification","message","notificationEl","document","getElementById","textContent","className","concat","style","display","setTimeout","getDataTable","_x","_x2","_getDataTable","_callee2","sheetName","tableName","_context2","Excel","run","_ref","_callee","context","sheet","table","range","_context","workbook","worksheets","getItem","tables","getRange","load","sync","_x10","t0","updateDataTable","rowIndex","updateDict","reject","headerRow","columnIndexMap","columnName","index","columnIndex","undefined","getDataBodyRange","getRow","error","insertDataTable","newRow","Array","fill","indexOf","rows","add","freeze","OPEN","IN_PROGRESS","WAITING_REVIEW","WAITING_RELEASE","RELEASED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","definition","key","get","obj","prop","qaModal","bootstrap","Modal","getColumnIndex","processAndDisplayData","data","total","taskData","map","row","id","taskId","status","questionVN","questionDate","raisedPerson","answerVN","answerDate","answerPerson","questionJP","answerJP","statusGroups","Open","WaitingClientFeedback","WaitingConfirm","Confirmed","Closed","task","console","warn","taskList","taskContainer","replace","taskCount","innerHTML","excelDateToJSDate","join","querySelectorAll","link","addEventListener","handleModalOpen","event","preventDefault","this","getAttribute","qaid","show","excelDate","Date","toISOString","split","insertNewQA","formValues","getFormValues","ID","TaskID","Status","Question_VN","Question_Date","Raised_Person","Answer_VN","Answer_Date","Answer_Person","Question_JP","Answer_JP","hide","updateQA","Number","Office","onReady","info","host","HostType","readOnly"],"sourceRoot":""}