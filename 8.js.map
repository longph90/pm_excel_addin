{"version":3,"file":"8.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/components/ui/Emoji.js","webpack://office-addin-taskpane-js/./src/components/ui/Modal.js","webpack://office-addin-taskpane-js/./src/components/ui/TaskUpdateForm.js","webpack://office-addin-taskpane-js/./src/components/ui/TimeSheetUpdateForm.js","webpack://office-addin-taskpane-js/./src/components/main/Task.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Component Emoji nhận 'name' là một props để render emoji tương ứng\nconst Emoji = ({ name }) => {\n  // Danh sách emoji tương ứng với tên\n  const emojiList = {\n    smile: \"😄\",\n    sad: \"😢\",\n    laugh: \"😂\",\n    angry: \"😠\",\n    love: \"🥰\",\n    surprised: \"😱\",\n    dead: \"💀\",\n    crying: \"😭\",\n    party: \"🥳\",\n    rocket: \"🚀\",\n    thumbs_up: \"👍\",\n    heart: \"❤️\",\n  };\n\n  // Kiểm tra nếu emoji tồn tại trong danh sách\n  const emoji = emojiList[name] || \"❓\"; // Nếu không tìm thấy, trả về dấu hỏi ❓\n\n  return (\n    <span role=\"img\" aria-label={name} aria-hidden={emoji === \"❓\"}>\n      {emoji}\n    </span>\n  );\n};\n\n// PropTypes để kiểm tra kiểu dữ liệu cho props\nEmoji.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nexport default Emoji;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Modal = ({ show, title, body, onClose, onSave }) => {\n  return (\n    <div\n      className={`modal fade ${show ? \"show d-block\" : \"\"}`}\n      tabIndex=\"-1\"\n      style={{ backgroundColor: show ? \"rgba(0, 0, 0, 0.5)\" : \"transparent\" }}\n    >\n      <div className=\"modal-dialog\">\n        <div className=\"modal-content\">\n          <div className=\"modal-header\">\n            <h5 className=\"modal-title\">{title}</h5>\n            <button type=\"button\" className=\"btn-close\" onClick={onClose}></button>\n          </div>\n          <div className=\"modal-body\">\n            <p>{body}</p>\n          </div>\n          <div className=\"modal-footer\">\n            <button type=\"button\" className=\"btn btn-secondary\" onClick={onClose}>\n              Close\n            </button>\n            <button type=\"button\" className=\"btn btn-primary\" onClick={onSave}>\n              Save changes\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  show: PropTypes.bool.isRequired, // Xác định modal có hiển thị hay không\n  title: PropTypes.string.isRequired, // Tiêu đề của modal\n  body: PropTypes.string.isRequired, // Nội dung bên trong modal\n  onClose: PropTypes.func.isRequired, // Hàm xử lý khi nhấn \"Close\"\n  onSave: PropTypes.func.isRequired, // Hàm xử lý khi nhấn \"Save changes\"\n};\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Accordion from \"../ui/Accordion\";\n\nconst TaskUpdateForm = ({ initialData, onFormDataChange }) => {\n  const [formData, setFormData] = useState(initialData);\n\n  // Hàm xử lý khi người dùng thay đổi dữ liệu trong các input field\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    const updatedData = { ...formData, [name]: value };\n    setFormData(updatedData);\n    onFormDataChange(updatedData);\n  };\n\n  // Cấu trúc các nhóm trường để đưa vào accordion\n  const accordionItems = [\n    {\n      title: \"Planning\",\n      content: (\n        <>\n          {/* Task Name */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Task Name</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"TaskName\"\n              value={formData.TaskName}\n              onChange={handleChange}\n            />\n          </div>\n\n          {/* Type */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Type</span>\n            <input type=\"text\" className=\"form-control\" name=\"Type\" value={formData.Type} onChange={handleChange} />\n          </div>\n\n          {/* PIC */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">PIC</span>\n            <input type=\"text\" className=\"form-control\" name=\"PIC\" value={formData.PIC} onChange={handleChange} />\n          </div>\n\n          {/* Reviewer */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Reviewer</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"Reviewer\"\n              value={formData.Reviewer}\n              onChange={handleChange}\n            />\n          </div>\n\n          {/* Planned Start Date */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">P. Start Date</span>\n            <input\n              type=\"date\"\n              className=\"form-control\"\n              name=\"P.StartDate\"\n              value={formData[\"P.StartDate\"]}\n              onChange={handleChange}\n            />\n          </div>\n\n          {/* Planned End Date */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">P. End Date</span>\n            <input\n              type=\"date\"\n              className=\"form-control\"\n              name=\"P.EndDate\"\n              value={formData[\"P.EndDate\"]}\n              onChange={handleChange}\n            />\n          </div>\n\n          {/* Planned Effort */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">P. Effort</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"P.Effort\"\n              value={formData[\"P.Effort\"]}\n              onChange={handleChange}\n            />\n          </div>\n        </>\n      ),\n    },\n    {\n      title: \"Actual\",\n      content: (\n        <>\n          {/* Actual Start Date */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">A. Start Date</span>\n            <input\n              type=\"date\"\n              className=\"form-control\"\n              name=\"A.StartDate\"\n              value={formData[\"A.StartDate\"]}\n              onChange={handleChange}\n            />\n          </div>\n\n          {/* Actual End Date */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">A. End Date</span>\n            <input\n              type=\"date\"\n              className=\"form-control\"\n              name=\"A.EndDate\"\n              value={formData[\"A.EndDate\"]}\n              onChange={handleChange}\n            />\n          </div>\n\n          {/* Actual Effort */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">A. Effort</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"A.Effort\"\n              value={formData[\"A.Effort\"]}\n              onChange={handleChange}\n            />\n          </div>\n\n          {/* %A Completed */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">%A Completed</span>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              name=\"%A.Completed\"\n              value={formData[\"%A.Completed\"]}\n              onChange={handleChange}\n            />\n          </div>\n        </>\n      ),\n    },\n    {\n      title: \"Link\",\n      content: (\n        <>\n          {/* Link Jira */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Link Jira</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"LinkJira\"\n              value={formData.LinkJira}\n              onChange={handleChange}\n            />\n            <span className=\"input-group-text\">\n              <a className=\"icon-link\" href={formData.LinkJira} target=\"_blank\">\n                Open\n              </a>\n            </span>\n          </div>\n\n          {/* Link Estimation */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Link Estimation</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"LinkEstimation\"\n              value={formData.LinkEstimation}\n              onChange={handleChange}\n            />\n            <span className=\"input-group-text\">\n              <a className=\"icon-link\" href={formData.LinkEstimation} target=\"_blank\">\n                Open\n              </a>\n            </span>\n          </div>\n\n          {/* Link BD */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Link BD</span>\n            <input type=\"text\" className=\"form-control\" name=\"LinkBD\" value={formData.LinkBD} onChange={handleChange} />\n            <span className=\"input-group-text\">\n              <a className=\"icon-link\" href={formData.LinkBD} target=\"_blank\">\n                Open\n              </a>\n            </span>\n          </div>\n\n          {/* Link DD */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Link DD</span>\n            <input type=\"text\" className=\"form-control\" name=\"LinkDD\" value={formData.LinkDD} onChange={handleChange} />\n            <span className=\"input-group-text\">\n              <a className=\"icon-link\" href={formData.LinkDD} target=\"_blank\">\n                Open\n              </a>\n            </span>\n          </div>\n\n          {/* Link Evidence */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Link Evidence</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"LinkEvidence\"\n              value={formData.LinkEvidence}\n              onChange={handleChange}\n            />\n            <span className=\"input-group-text\">\n              <a className=\"icon-link\" href={formData.LinkEvidence} target=\"_blank\">\n                Open\n              </a>\n            </span>\n          </div>\n          {/* Link Comment */}\n          <div className=\"input-group mb-3\">\n            <span className=\"input-group-text\">Link Comment</span>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"LinkReview\"\n              value={formData.LinkReview}\n              onChange={handleChange}\n            />\n            <span className=\"input-group-text\">\n              <a className=\"icon-link\" href={formData.LinkReview} target=\"_blank\">\n                Open\n              </a>\n            </span>\n          </div>\n        </>\n      ),\n    },\n  ];\n\n  return (\n    <form>\n      {/* Task ID */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">Task ID</span>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          name=\"TaskID\"\n          value={formData.TaskID}\n          onChange={handleChange}\n          readOnly\n        />\n      </div>\n\n      <Accordion items={accordionItems} />\n\n      {/* Note */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">Note</span>\n        <textarea className=\"form-control\" name=\"Note\" value={formData.Note} onChange={handleChange} rows={3} />\n      </div>\n    </form>\n  );\n};\n\nTaskUpdateForm.propTypes = {\n  initialData: PropTypes.object.isRequired,\n  onFormDataChange: PropTypes.func.isRequired,\n};\n\nexport default TaskUpdateForm;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst TimesheetUpdateForm = ({ initialData, onFormDataChange }) => {\n  const [formData, setFormData] = useState({\n    rowIndex: -1,\n    Date: \"\",\n    TaskID: initialData.TaskID,\n    Account: initialData.PIC,\n    StartTime: \"\",\n    EndTime: \"\",\n    TotalTime: \"\",\n    Description: \"\",\n  });\n\n  // Hàm xử lý khi người dùng thay đổi dữ liệu\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    const updatedData = { ...formData, [name]: value };\n    setFormData(updatedData);\n    onFormDataChange(updatedData);\n  };\n\n  return (\n    <form>\n      {/* Date */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">Date</span>\n        <input type=\"date\" className=\"form-control\" name=\"Date\" value={formData.Date} onChange={handleChange} />\n      </div>\n\n      {/* TaskID */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">TaskID</span>\n        <input type=\"text\" className=\"form-control\" name=\"TaskID\" value={formData.TaskID} onChange={handleChange} />\n      </div>\n\n      {/* PIC */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">Account</span>\n        <input type=\"text\" className=\"form-control\" name=\"Account\" value={formData.Account} onChange={handleChange} />\n      </div>\n\n      {/* Start Time */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">Start Time</span>\n        <input\n          type=\"time\"\n          className=\"form-control\"\n          name=\"StartTime\"\n          value={formData.StartTime}\n          onChange={handleChange}\n        />\n      </div>\n\n      {/* End Time */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">End Time</span>\n        <input type=\"time\" className=\"form-control\" name=\"EndTime\" value={formData.EndTime} onChange={handleChange} />\n      </div>\n\n      {/* Description */}\n      <div className=\"input-group mb-3\">\n        <span className=\"input-group-text\">Desc</span>\n        <textarea className=\"form-control\" name=\"Desc\" value={formData.Desc} onChange={handleChange} />\n      </div>\n    </form>\n  );\n};\n\nTimesheetUpdateForm.propTypes = {\n  initialData: PropTypes.object.isRequired,\n  onFormDataChange: PropTypes.func.isRequired,\n};\n\nexport default TimesheetUpdateForm;\n","import React, { useEffect, useState } from \"react\";\nimport { getDataTable, convertToJSON, excelDateToJSDate, logWork, updateExcelData } from \"../../js/excelFunction.js\";\nimport Table from \"../ui/Table.js\";\nimport Emoji from \"../ui/Emoji.js\";\nimport { Button, ButtonWithIcon, ButtonWithBadge } from \"../ui/Button.js\";\nimport Modal from \"../ui/Modal.js\";\nimport TaskUpdateForm from \"../ui/TaskUpdateForm.js\";\nimport TimesheetUpdateForm from \"../ui/TimeSheetUpdateForm.js\";\n\nconst Task = () => {\n  const [loading, setLoading] = useState(true); // Trạng thái loading bắt đầu là true\n  const [data, setData] = useState([]);\n  const [dataOverDue, setDataOverDue] = useState([]);\n  const [dataLateStart, setDataLateStart] = useState([]);\n  const [dataNotPlan, setDataNotPlan] = useState([]);\n  const [account, setAccount] = useState(\"\");\n  const [total, setTotal] = useState(\"0\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [modalVisible, setModalVisible] = useState(false);\n  const [selectedTaskInfo, setSelectedTaskInfo] = useState(null);\n  const [formDataTimesheet, setformDataTimesheet] = useState({});\n  const [formDataTask, setformDataTask] = useState({});\n  const [error, setError] = useState(\"\");\n  const [notStarted, setNotStarted] = useState([]);\n  const [doing, setDoing] = useState([]);\n  const [reviewing, setReviewing] = useState([]);\n  const [waitingRelease, setWaitingRelease] = useState([]);\n  const [released, setReleased] = useState([]);\n  const [currentDataType, setCurrentDataType] = useState(\"doing\"); // Trạng thái hiện tại của data\n\n  // Logic for Modal\n\n  const handleUpdateProcess = async (taskInfo) => {\n    // Kiểm tra và cập nhật giá trị của taskInfo[\"%A.Completed\"]\n    if (taskInfo[\"%A.Completed\"] >= 0 && taskInfo[\"%A.Completed\"] < 10) {\n      taskInfo[\"A.StartDate\"] = new Date().toISOString().slice(0, 10);\n      taskInfo[\"%A.Completed\"] = 0.1;\n    } else if (taskInfo[\"%A.Completed\"] >= 10 && taskInfo[\"%A.Completed\"] < 80) {\n      taskInfo[\"A.EndDate\"] = new Date().toISOString().slice(0, 10);\n      taskInfo[\"%A.Completed\"] = 0.8;\n    } else if (taskInfo[\"%A.Completed\"] >= 80 && taskInfo[\"%A.Completed\"] < 90) {\n      taskInfo[\"%A.Completed\"] = 0.9;\n    } else if (taskInfo[\"%A.Completed\"] >= 90 && taskInfo[\"%A.Completed\"] < 100) {\n      taskInfo[\"A.ReleaseDate\"] = new Date().toISOString().slice(0, 10);\n      taskInfo[\"%A.Completed\"] = 1;\n    }\n\n    // Hiển thị taskInfo sau khi cập nhật\n    // document.getElementById(\"task_info\").innerHTML = JSON.stringify(taskInfo);\n    await updateExcelData(\"WBS\", \"TblWbs\", taskInfo);\n    await loadData();\n\n    if (JSON.stringify(taskInfo) !== JSON.stringify(selectedTaskInfo)) {\n      setSelectedTaskInfo(taskInfo);\n    }\n  };\n\n  const handleUpdateTask = async (taskInfo) => {\n    setSelectedOption(\"edit-task\");\n    setSelectedTaskInfo(taskInfo);\n    setModalVisible(true);\n  };\n  const handleUpdateTimesheet = async (taskInfo) => {\n    setSelectedOption(\"logwork\");\n    setSelectedTaskInfo(taskInfo);\n    setModalVisible(true);\n  };\n\n  const processData = (jsonData) => {\n    return jsonData.map((item) => {\n      item[\"P.StartDate\"] = excelDateToJSDate(item[\"P.StartDate\"]);\n      item[\"P.EndDate\"] = excelDateToJSDate(item[\"P.EndDate\"]);\n      item[\"%A.Completed\"] = item[\"%A.Completed\"] * 100;\n\n      let status;\n      switch (item[\"%A.Completed\"]) {\n        case 0:\n          status = <Emoji name=\"smile\" />;\n          break;\n        case 0.5:\n          status = <Emoji name=\"surprised\" />;\n          break;\n        case 0.6:\n          status = <Emoji name=\"crying\" />;\n          break;\n        case 0.8:\n          status = <Emoji name=\"sad\" />;\n          break;\n        default:\n          status = <Emoji name=\"dead\" />;\n      }\n\n      return {\n        ...item,\n        // status,\n        action: (\n          <div class=\"input-group mb-3\">\n            <ButtonWithIcon\n              type=\"success\"\n              icon=\"play-btn\"\n              size=\"sm\"\n              onClick={() => handleUpdateProcess(item)}\n              title=\"Click to change progress\"\n            />\n            <ButtonWithIcon\n              type=\"warning\"\n              icon=\"pen\"\n              size=\"sm\"\n              onClick={() => handleUpdateTask(item)}\n              title=\"Click to open task details\"\n            />\n            <ButtonWithIcon\n              type=\"danger\"\n              icon=\"stopwatch\"\n              size=\"sm\"\n              onClick={() => handleUpdateTimesheet(item)}\n              title=\"Click to logwork\"\n            />\n          </div>\n        ),\n      };\n    });\n  };\n\n  // Cấu hình màu sắc cho các cột\n  const colorConfig = {\n    \"A.Effort\": {\n      red: (value, row) => value > 0 && value > row[\"P.Effort\"],\n      green: (value, row) => value > 0 && value <= row[\"P.Effort\"],\n      textWhite: (value, row) => value > 0,\n    },\n  };\n\n  const groupDataByCompletion = (data) => {\n    const notStarted = [];\n    const doing = [];\n    const reviewing = [];\n    const waitingRelease = [];\n    const released = [];\n\n    data.forEach((item) => {\n      if (item[\"%A.Completed\"] === 0) {\n        notStarted.push(item);\n      } else if (item[\"%A.Completed\"] >= 10 && item[\"%A.Completed\"] < 80) {\n        doing.push(item);\n      } else if (item[\"%A.Completed\"] >= 80 && item[\"%A.Completed\"] < 90) {\n        reviewing.push(item);\n      } else if (item[\"%A.Completed\"] >= 90 && item[\"%A.Completed\"] < 100) {\n        waitingRelease.push(item);\n      } else if (item[\"%A.Completed\"] === 100) {\n        released.push(item);\n      }\n    });\n\n    setNotStarted(notStarted);\n    setDoing(doing);\n    setReviewing(reviewing);\n    setWaitingRelease(waitingRelease);\n    setReleased(released);\n  };\n\n  /**\n   * Lọc dữ liệu các task quá hạn dựa trên P.ReleaseDate và %A.Completed\n   * @param {Array} data - Dữ liệu đầu vào ở dạng JSON (danh sách các task)\n   * @param {Date} today - Ngày hiện tại để so sánh (mặc định là ngày hiện tại)\n   * @return {Array} - Danh sách các task quá hạn (overdue)\n   */\n  const filterOverdueTasks = (data, today = new Date()) => {\n    return data.filter((item) => {\n      // Chuyển đổi P.ReleaseDate từ định dạng Excel sang Date của JavaScript\n      const releaseDate = excelDateToJSDate(item[\"P.ReleaseDate\"]);\n\n      // Kiểm tra nếu P.ReleaseDate nhỏ hơn ngày hiện tại và %A.Completed nhỏ hơn 1\n      return releaseDate < today && item[\"%A.Completed\"] < 1;\n    });\n  };\n\n  /**\n   * Lọc dữ liệu các task có ngày bắt đầu thực tế trễ hơn so với ngày bắt đầu dự kiến\n   * @param {Array} data - Dữ liệu đầu vào ở dạng JSON (danh sách các task)\n   * @return {Array} - Danh sách các task bắt đầu trễ\n   */\n  const filterLateStartTasks = (data, today = new Date()) => {\n    return data.filter((item) => {\n      // Chuyển đổi P.StartDate và A.StartDate từ định dạng Excel sang Date của JavaScript\n      const plannedStartDate = excelDateToJSDate(item[\"P.StartDate\"]);\n\n      // Kiểm tra nếu A.StartDate lớn hơn P.StartDate (trễ hơn kế hoạch)\n      return today > plannedStartDate && item[\"%A.Completed\"] === 0;\n    });\n  };\n\n  const filterNotPlanTasks = (data) => {\n    return data.filter((item) => {\n      return item[\"P.Effort\"] === 0 || item[\"P.Effort\"] === \"\";\n    });\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n  useEffect(() => {\n    // Cập nhật data tương ứng với trạng thái hiện tại\n    switch (currentDataType) {\n      case \"notStarted\":\n        setData(notStarted);\n        break;\n      case \"doing\":\n        setData(doing);\n        break;\n      case \"reviewing\":\n        setData(reviewing);\n        break;\n      case \"waitingRelease\":\n        setData(waitingRelease);\n        break;\n      case \"released\":\n        setData(released);\n        break;\n      default:\n        setData(doing);\n    }\n  }, [notStarted, doing, reviewing, waitingRelease, released, currentDataType]);\n\n  // Handler button Load\n  const loadData = async () => {\n    setLoading(true);\n    // Tải dữ liệu từ bảng Excel\n    const result = await getDataTable(\"WBS\", \"TblWbs\");\n    const jsonData = convertToJSON(result);\n\n    // Chuẩn bị chuỗi account để tìm kiếm\n    const searchString = account.trim().toLowerCase();\n\n    // Lọc dữ liệu dựa trên bất kỳ cột nào có chứa giá trị khớp với searchString\n    const filterData = jsonData.filter((item) => {\n      // Sử dụng Object.values để lấy tất cả giá trị của các cột\n      return Object.values(item).some((value) => {\n        // Kiểm tra nếu giá trị là chuỗi và so sánh\n        if (typeof value === \"string\") {\n          return value.trim().toLowerCase().includes(searchString);\n        }\n        return false;\n      });\n    });\n\n    // Xử lý dữ liệu sau khi lọc\n    const updatedData = processData(filterData);\n    groupDataByCompletion(updatedData);\n    setTotal(updatedData.length);\n\n    // Not Plan Tasks\n    const notPlanData = filterNotPlanTasks(filterData);\n    setDataNotPlan(notPlanData);\n\n    //\n    const overdueData = filterOverdueTasks(filterData); // Gọi hàm lọc quá hạn\n    setDataOverDue(overdueData);\n\n    //\n    const lateStartData = filterLateStartTasks(filterData); // Gọi hàm lọc bắt đầu trễ\n    setDataLateStart(lateStartData);\n\n    setLoading(false); // Kết thúc trạng thái loading\n  };\n\n  const loadDataAll = async () => {\n    setAccount(\"\");\n    await loadData();\n  };\n\n  const loadDataNotPlan = () => {\n    const updatedData = processData(dataNotPlan);\n    setData(updatedData);\n    setTotal(updatedData.length);\n  };\n\n  const loadDataOverDue = () => {\n    const updatedData = processData(dataOverDue);\n    setData(updatedData);\n    setTotal(updatedData.length);\n  };\n\n  const loadDataLateStart = () => {\n    const updatedData = processData(dataLateStart);\n    setData(updatedData);\n    setTotal(updatedData.length);\n  };\n  // Handler button Load\n\n  const columns = [\n    { header: \"Idx\", key: \"rowIndex\" },\n    { header: \"TaskID\", key: \"TaskID\" },\n    { header: \"TaskName\", key: \"TaskName\" },\n    { header: \"P.Start\", key: \"P.StartDate\" },\n    { header: \"P.End\", key: \"P.EndDate\" },\n    { header: \"P.Effort\", key: \"P.Effort\" },\n    { header: \"A.Effort\", key: \"A.Effort\" },\n    { header: \"%A.Completed\", key: \"%A.Completed\" },\n    { header: \"PIC\", key: \"PIC\" },\n    { header: \"Reviewer\", key: \"Reviewer\" },\n    // { header: \"Status\", key: \"status\" },\n    { header: \"Action\", key: \"action\" },\n  ];\n\n  const getTitleModal = () => {\n    switch (selectedOption) {\n      case \"logwork\":\n        return \"Update Timesheet\";\n      case \"edit-task\":\n        return \"Update Task\";\n      default:\n        return null;\n    }\n  };\n\n  const getModalContent = () => {\n    switch (selectedOption) {\n      case \"edit-task\":\n        return <TaskUpdateForm initialData={selectedTaskInfo} onFormDataChange={handleFormDataChange} />;\n      case \"logwork\":\n        return <TimesheetUpdateForm initialData={selectedTaskInfo} onFormDataChange={handleFormDataChange} />;\n      default:\n        return null;\n    }\n  };\n\n  const handleFormDataChange = (updatedData) => {\n    switch (selectedOption) {\n      case \"edit-task\":\n        setformDataTask(updatedData);\n        break;\n      case \"logwork\":\n        setformDataTimesheet(updatedData); // Lưu dữ liệu form vào state\n        break;\n    }\n  };\n\n  const handleSave = async () => {\n    switch (selectedOption) {\n      case \"edit-task\":\n        formDataTask[\"%A.Completed\"] = formDataTask[\"%A.Completed\"] / 100;\n        await updateExcelData(\"WBS\", \"TblWbs\", formDataTask);\n        setSelectedTaskInfo({ ...formDataTask });\n        await loadData();\n        break;\n      case \"logwork\":\n        logWork(formDataTimesheet);\n        await loadData();\n    }\n    setModalVisible(false);\n  };\n\n  // Hiển thị spinner nếu đang ở trạng thái loading\n\n  if (loading) {\n    return (\n      <div className=\"d-flex justify-content-center\">\n        <p>Loading...</p>\n        {/* Bạn có thể thêm spinner tùy ý, ví dụ của Bootstrap */}\n        <div className=\"spinner-border\" role=\"status\">\n          <span className=\"visually-hidden\">Loading...</span>\n        </div>\n      </div>\n    );\n  }\n\n  // Hiển thị thông báo lỗi nếu có lỗi\n  if (error) {\n    return <div className=\"alert alert-danger\">{error}</div>;\n  }\n\n  return (\n    <div>\n      <h3>Task information:</h3>\n      <p id=\"task_info\"></p>\n      <div className=\"input-group input-group-sm mb-3\">\n        <span className=\"input-group-text\" id=\"basic-addon1\">\n          Search:\n        </span>\n        <input\n          id=\"txtAccount\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Please enter the information you want to search for.\"\n          aria-label=\"Username\"\n          aria-describedby=\"basic-addon1\"\n          value={account}\n          onChange={(e) => setAccount(e.target.value)}\n        ></input>\n        <Button label=\"Load\" onClick={loadData} />\n        <Button label=\"LoadAll\" type=\"danger\" onClick={loadDataAll} />\n      </div>\n      <div className=\"input-group mb-3\">\n        <ButtonWithBadge label={\"Total:\"} type={\"outline-primary\"} size={\"sm\"} badge={total} />\n        <ButtonWithBadge\n          label={\"⏰:\"}\n          type={\"outline-primary\"}\n          size={\"sm\"}\n          active={currentDataType === \"notStarted\" ? \"active\" : \"\"}\n          badge={notStarted.length}\n          onClick={() => {\n            setData(notStarted);\n            setCurrentDataType(\"notStarted\");\n          }}\n        />\n        <ButtonWithBadge\n          label={\"👨‍💻:\"}\n          type={\"outline-primary\"}\n          size={\"sm\"}\n          active={currentDataType === \"doing\" ? \"active\" : \"\"}\n          badge={doing.length}\n          onClick={() => {\n            setData(doing);\n            setCurrentDataType(\"doing\");\n          }}\n        />\n        <ButtonWithBadge\n          label={\"👮:\"}\n          type={\"outline-primary\"}\n          size={\"sm\"}\n          active={currentDataType === \"reviewing\" ? \"active\" : \"\"}\n          badge={reviewing.length}\n          onClick={() => {\n            setData(reviewing);\n            setCurrentDataType(\"reviewing\");\n          }}\n        />\n        <ButtonWithBadge\n          label={\"🚀:\"}\n          type={\"outline-primary\"}\n          size={\"sm\"}\n          active={currentDataType === \"waitingRelease\" ? \"active\" : \"\"}\n          badge={waitingRelease.length}\n          onClick={() => {\n            setData(waitingRelease);\n            setCurrentDataType(\"waitingRelease\");\n          }}\n        />\n        <ButtonWithBadge\n          label={\"✅:\"}\n          type={\"outline-primary\"}\n          size={\"sm\"}\n          active={currentDataType === \"released\" ? \"active\" : \"\"}\n          badge={released.length}\n          onClick={() => {\n            setData(released);\n            setCurrentDataType(\"released\");\n          }}\n        />\n      </div>\n      <div className=\"input-group mb-3\">\n        {/* <button type=\"button\" className=\"btn btn-sm btn-secondary\" onClick={loadDataNotPlan}>\n          Backlog: <span className=\"badge text-bg-secondary\">{dataNotPlan.length}</span>\n        </button> */}\n        {/* <button type=\"button\" className=\"btn btn-sm btn-warning\" onClick={loadDataLateStart}>\n          Late Start: <span className=\"badge text-bg-secondary\">{dataLateStart.length}</span>\n        </button> */}\n        {/* <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={loadDataOverDue}>\n          Overdue: <span className=\"badge text-bg-secondary\">{dataOverDue.length}</span>\n        </button> */}\n      </div>\n      <Table data={data} columns={columns} colorConfig={colorConfig} />\n      {modalVisible && (\n        <Modal\n          show={modalVisible}\n          title={getTitleModal()}\n          body={getModalContent()}\n          onClose={() => setModalVisible(false)}\n          onSave={handleSave}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Task;\n"],"names":["Emoji","name","emoji","smile","sad","laugh","angry","love","surprised","dead","crying","party","rocket","thumbs_up","heart","React","role","propTypes","PropTypes","isRequired","Modal","show","title","body","onClose","onSave","className","tabIndex","style","backgroundColor","type","onClick","TaskUpdateForm","initialData","onFormDataChange","formData","setFormData","useState","handleChange","e","value","target","updatedData","accordionItems","content","TaskName","onChange","Type","PIC","Reviewer","LinkJira","href","LinkEstimation","LinkBD","LinkDD","LinkEvidence","LinkReview","TaskID","readOnly","Accordion","items","Note","rows","TimesheetUpdateForm","rowIndex","Date","Account","StartTime","EndTime","TotalTime","Description","Desc","Task","loading","setLoading","data","setData","dataOverDue","setDataOverDue","dataLateStart","setDataLateStart","dataNotPlan","setDataNotPlan","account","setAccount","total","setTotal","selectedOption","setSelectedOption","modalVisible","setModalVisible","selectedTaskInfo","setSelectedTaskInfo","formDataTimesheet","setformDataTimesheet","formDataTask","setformDataTask","error","setError","notStarted","setNotStarted","doing","setDoing","reviewing","setReviewing","waitingRelease","setWaitingRelease","released","setReleased","currentDataType","setCurrentDataType","useEffect","loadData","async","result","getDataTable","jsonData","convertToJSON","searchString","trim","toLowerCase","filterData","filter","item","Object","values","some","includes","map","status","excelDateToJSDate","action","class","ButtonWithIcon","icon","size","taskInfo","toISOString","slice","updateExcelData","JSON","stringify","handleUpdateProcess","handleUpdateTask","handleUpdateTimesheet","processData","forEach","push","groupDataByCompletion","length","notPlanData","filterNotPlanTasks","overdueData","filterOverdueTasks","today","lateStartData","filterLateStartTasks","plannedStartDate","handleFormDataChange","id","placeholder","Button","label","ButtonWithBadge","badge","active","Table","columns","header","key","colorConfig","red","row","green","textWhite","getTitleModal","getModalContent","logWork"],"sourceRoot":""}