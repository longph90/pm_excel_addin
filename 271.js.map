{"version":3,"file":"271.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/components/main/ProjectWorkLog.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getDataTable, convertToJSON, excelDateToJSDate } from \"../../js/excelFunction.js\";\nimport Table from \"../ui/Table\";\n\nconst ProjectWorkLog = () => {\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [month, setMonth] = useState(new Date().getMonth() + 1);\n  const [days, setDays] = useState(generateDays(year, month));\n  const [accounts, setAccounts] = useState([]);\n  const [timesheetData, setTimesheetData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const accountsData = await getDataTable(\"Resource\", \"TblResource\");\n      const jsonData = await convertToJSON(accountsData);\n      const accountList = jsonData.map((item) => item.Account);\n      setAccounts(accountList);\n\n      const timesheetData = await getDataTable(\"Timesheet\", \"TblTimeSheet\");\n      const timesheetJson = await convertToJSON(timesheetData);\n      setTimesheetData(timesheetJson);\n    };\n    fetchData();\n  }, []);\n\n  const planEffort = 8;\n\n  // Tạo dữ liệu cho bảng\n  const data =\n    accounts && accounts.length > 0\n      ? accounts.map((account) => {\n          const row = { Account: account };\n          days.forEach((day) => {\n            const [dayNumber] = day.split(\"(\");\n            const dateStr = `${year}-${month.toString().padStart(2, \"0\")}-${dayNumber}`;\n            const actualEffort = timesheetData\n              .filter((entry) => entry.Account === account && excelDateToJSDate(entry.Date) === dateStr)\n              .reduce((sum, entry) => sum + entry.TotalTime, 0)\n              .toFixed(1); // Làm tròn đến 1 chữ số thập phân\n            row[`Effort_${day}`] = `${actualEffort}/${planEffort}`;\n          });\n          return row;\n        })\n      : [];\n\n  // Đặt các cột cho bảng\n  const columns = [\n    { header: \"Account/Date\", key: \"Account\" },\n    ...days.map((day) => ({ header: day, key: `Effort_${day}` })),\n  ];\n\n  // Cấu hình màu sắc\n  const colorConfig = days.reduce((config, day) => {\n    config[`Effort_${day}`] = {\n      red: (value) => {\n        const [actual, plan] = value.split(\"/\").map(Number);\n        const ratio = actual / plan;\n        return ratio < 0.8 || ratio > 1.2;\n      },\n      green: (value) => {\n        const [actual, plan] = value.split(\"/\").map(Number);\n        const ratio = actual / plan;\n        return ratio >= 0.8 && ratio <= 1.2;\n      },\n      textWhite: () => {\n        return true;\n      },\n    };\n    return config;\n  }, {});\n\n  function generateDays(year, month) {\n    const date = new Date(year, month - 1, 1);\n    const daysArray = [];\n    const dayNames = [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"]; // Chủ Nhật, Thứ 2, Thứ 3, Thứ 4, Thứ 5, Thứ 6, Thứ 7\n\n    while (date.getMonth() === month - 1) {\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) {\n        // Bỏ qua Chủ Nhật (0) và Thứ 7 (6)\n        const day = date.getDate().toString().padStart(2, \"0\");\n        const dayName = dayNames[dayOfWeek];\n        daysArray.push(`${day}(${dayName})`);\n      }\n      date.setDate(date.getDate() + 1);\n    }\n    return daysArray;\n  }\n\n  const handleYearChange = (e) => {\n    const newYear = parseInt(e.target.value, 10);\n    setYear(newYear);\n    setDays(generateDays(newYear, month));\n  };\n\n  const handleMonthChange = (e) => {\n    const newMonth = parseInt(e.target.value, 10);\n    setMonth(newMonth);\n    setDays(generateDays(year, newMonth));\n  };\n\n  return (\n    <div>\n      <h1>Project Work Log</h1>\n      <div id=\"output\"></div>\n      <div>\n        <div className=\"input-group input-group-sm mb-3\">\n          <span className=\"input-group-text\">Year</span>\n          <select className=\"form-select\" value={year} onChange={handleYearChange}>\n            {[2022, 2023, 2024, 2025].map((y) => (\n              <option key={y} value={y}>\n                {y}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"input-group input-group-sm mb-3\">\n          <span className=\"input-group-text\">Month</span>\n          <select className=\"form-select\" value={month} onChange={handleMonthChange}>\n            {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((m) => (\n              <option key={m} value={m}>\n                {m.toString().padStart(2, \"0\")}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <Table data={data} columns={columns} colorConfig={colorConfig} />\n    </div>\n  );\n};\n\nexport default ProjectWorkLog;\n"],"names":["ProjectWorkLog","year","setYear","useState","Date","getFullYear","month","setMonth","getMonth","days","setDays","generateDays","accounts","setAccounts","timesheetData","setTimesheetData","useEffect","async","accountsData","getDataTable","accountList","convertToJSON","map","item","Account","timesheetJson","fetchData","data","length","account","row","forEach","day","dayNumber","split","dateStr","toString","padStart","actualEffort","filter","entry","excelDateToJSDate","reduce","sum","TotalTime","toFixed","columns","header","key","colorConfig","config","red","value","actual","plan","Number","ratio","green","textWhite","date","daysArray","dayNames","dayOfWeek","getDay","getDate","dayName","push","setDate","React","id","className","onChange","e","newYear","parseInt","target","y","newMonth","m","Table"],"sourceRoot":""}