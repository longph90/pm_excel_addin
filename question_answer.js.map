{"version":3,"file":"question_answer.js","mappings":"sDA6DO,SAASA,EAAiBC,EAASC,GAExC,MAAMC,EAAiBC,SAASC,eAAe,gBAG/CF,EAAeG,YAAcL,EAG7BE,EAAeI,UAAY,eAAeL,IAG1CC,EAAeK,MAAMC,QAAU,QAG/BC,YAAW,KACTP,EAAeK,MAAMC,QAAU,MAAM,GACpC,IACL,CAEOE,eAAeC,EAAaC,EAAWC,GAC5C,IACE,aAAaC,MAAMC,KAAIL,UAErB,MAIMM,EAJQC,EAAQC,SAASC,WAAWC,QAAQR,GAE9BS,OAAOD,QAAQP,GAEfS,WAIpB,OAHAN,EAAMO,KAAK,gBAELN,EAAQO,OACPR,EAAMS,MAAM,GAEvB,CAAE,MAAOC,GAEP,MADA3B,EAAiB,gCAAkCa,EAAY,KAAOc,EAAM1B,QAAS,UAC/E0B,CACR,CACF,CA4BO,SAASC,EAAgBf,EAAWC,EAAWe,EAAUC,GAC9D,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BlB,MAAMC,KAAKE,IAET,IAEIgB,EAFQhB,EAAQC,SAASC,WAAWC,QAAQR,GAE9BS,OAAOD,QAAQP,GAE7BG,EAAQiB,EAAMX,WAGlB,OAFAN,EAAMO,KAAK,UAEJN,EAAQO,OAAOU,MAAK,KAEzB,IAAIC,EAAYnB,EAAMS,OAAO,GAEzBW,EAAiB,CAAC,EACtBD,EAAUE,SAAQ,CAACC,EAAYC,KAC7BH,EAAeE,GAAcC,CAAK,IAIpC,IAAK,IAAID,KAAcT,EACrB,GAAIW,OAAOC,UAAUC,eAAeC,KAAKd,EAAYS,GAAa,CAChE,IAAIM,EAAcR,EAAeE,GACjC,QAAoBO,IAAhBD,EAIF,YADAZ,EAAO,gBAAgBM,gBAFvBtB,EAAMS,OAAOG,GAAUgB,GAAef,EAAWS,EAKrD,CAOF,OAHeL,EAAMa,mBAAmBC,OAAOnB,GACtCH,OAAS,CAACT,EAAMS,OAAOG,IAEzBX,EAAQO,OAAOU,MAAK,KACzBH,EAAQ,4BAA4B,GACpC,GACF,IACDiB,OAAOtB,IACR3B,EAAiB,+BAAiCa,EAAY,KAAOc,EAAM1B,QAAS,UACpFgC,EAAON,EAAM,GACb,GAEN,CAEO,SAASuB,EAAgBrC,EAAWC,EAAWgB,GACpD,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BlB,MAAMC,KAAKE,IAET,IAEIgB,EAFQhB,EAAQC,SAASC,WAAWC,QAAQR,GAE9BS,OAAOD,QAAQP,GAE7BG,EAAQiB,EAAMX,WAGlB,OAFAN,EAAMO,KAAK,UAEJN,EAAQO,OAAOU,MAAK,KAEzB,IAAIC,EAAYnB,EAAMS,OAAO,GAEzByB,EAAS,IAAIC,MAAMhB,EAAUiB,QAAQC,KAAK,IAG9C,IAAK,IAAIf,KAAcT,EACrB,GAAIW,OAAOC,UAAUC,eAAeC,KAAKd,EAAYS,GAAa,CAChE,IAAIM,EAAcT,EAAUmB,QAAQhB,GACpC,IAAqB,IAAjBM,EAIF,YADAZ,EAAO,gBAAgBM,gBAFvBY,EAAON,GAAef,EAAWS,EAKrC,CAMF,OAFAL,EAAMsB,KAAKC,IAAI,KAAM,CAACN,IAEfjC,EAAQO,OAAOU,MAAK,KACzBH,EAAQ,6BAA6B,GACrC,GACF,IACDiB,OAAOtB,IACR3B,EAAiB,gCAAkCa,EAAY,KAAOc,EAAM1B,QAAS,UACrFgC,EAAON,EAAM,GACb,GAEN,C,iFAhNsBc,OAAOiB,OAAO,CAClCC,KAAM,OACNC,YAAa,cACbC,eAAgB,iBAChBC,gBAAiB,kBACjBC,SAAU,Y,GCZRC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBpB,IAAjBqB,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CCrBAH,EAAoBM,EAAI,SAASH,EAASI,GACzC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEN,EAASK,IAC5EhC,OAAOkC,eAAeP,EAASK,EAAK,CAAEG,YAAY,EAAMC,IAAKL,EAAWC,IAG3E,ECPAR,EAAoBS,EAAI,SAASI,EAAKC,GAAQ,OAAOtC,OAAOC,UAAUC,eAAeC,KAAKkC,EAAKC,EAAO,E,eCWlGC,EAAU,IAAIC,UAAUC,MAAM9E,SAASC,eAAe,YAuC1D,SAAS8E,EAAe5C,GActB,MAbgB,CACd,KACA,SACA,SACA,cACA,gBACA,gBACA,YACA,cACA,gBACA,cACA,aAEagB,QAAQhB,EACzB,CAqGA,SAAS6C,EAAgBC,GACvBA,EAAMC,iBACN,MAAMzD,EAAW0D,KAAKC,aAAa,iBAC7BC,EAAOF,KAAKC,aAAa,aACzBE,EAASH,KAAKC,aAAa,eAC3BG,EAASJ,KAAKC,aAAa,eAC3BI,EAAeL,KAAKC,aAAa,qBACjCK,EAAeN,KAAKC,aAAa,qBACjCM,EAAaP,KAAKC,aAAa,mBAC/BO,EAAaR,KAAKC,aAAa,mBAC/BQ,EAAWT,KAAKC,aAAa,iBAC7BS,EAAWV,KAAKC,aAAa,iBAChBD,KAAKC,aAAa,mBAChBD,KAAKC,aAAa,qBAEvCpF,SAASC,eAAe,cAAc6F,MAAQrE,EAAW,EACzDzB,SAASC,eAAe,UAAU6F,MAAQT,EAC1CrF,SAASC,eAAe,YAAY6F,MAAQR,EAC5CtF,SAASC,eAAe,YAAY6F,MAAQP,EAC5CvF,SAASC,eAAe,kBAAkB6F,MAAQN,EAClDxF,SAASC,eAAe,kBAAkB6F,MAAQL,EAClDzF,SAASC,eAAe,gBAAgB6F,MAAQJ,EAChD1F,SAASC,eAAe,gBAAgB6F,MAAQH,EAChD3F,SAASC,eAAe,cAAc6F,MAAQF,EAC9C5F,SAASC,eAAe,cAAc6F,MAAQD,EAC9C7F,SAASC,eAAe,aAAaG,MAAMC,QAAU,SACrDL,SAASC,eAAe,aAAaG,MAAMC,QAAU,OACrDuE,EAAQmB,MACV,CAEA,SAASC,EAAkBC,GAEzB,OAAKA,GAAaC,MAAMD,GACf,GAGO,IAAIE,KAA2B,OAArBF,EAAY,OAAiB,KAExCG,cAAcC,MAAM,KAAK,EAC1C,CAMA,SAASC,IACP,MAAMC,EAAaC,IAEb9E,EAAa,CACjB+E,GAAIF,EAAWlB,KACfqB,OAAQH,EAAWjB,OACnBqB,OAAQJ,EAAWhB,OACnBqB,YAAaL,EAAWb,WACxBmB,cAAeN,EAAWf,aAC1BsB,cAAeP,EAAWd,aAC1BsB,UAAWR,EAAWV,SACtBmB,YAAaT,EAAWV,SACxBoB,cAAeV,EAAWU,cAC1BC,YAAaX,EAAWZ,WACxBwB,UAAWZ,EAAWX,WAExB9C,EAAAA,EAAAA,IAAgB,MAAO,QAASpB,GAChCkD,EAAQwC,MACV,CAEA,SAASC,IACP,MAAMd,EAAaC,IACb/E,EAAW6F,OAAOf,EAAW9E,UAE7BC,EAAa,CACjB+E,GAAIF,EAAWlB,KACfqB,OAAQH,EAAWjB,OACnBqB,OAAQJ,EAAWhB,OACnBqB,YAAaL,EAAWb,WACxBmB,cAAeN,EAAWf,aAC1BsB,cAAeP,EAAWd,aAC1BsB,UAAWR,EAAWV,SACtBmB,YAAaT,EAAWV,SACxBoB,cAAeV,EAAWU,cAC1BC,YAAaX,EAAWZ,WACxBwB,UAAWZ,EAAWX,WAExBpE,EAAAA,EAAAA,IAAgB,MAAO,QAASC,EAAUC,GAC1CkD,EAAQwC,MACV,CAEA,SAASZ,IACP,MAAO,CACL/E,SAAUzB,SAASC,eAAe,cAAc6F,MAChDT,KAAMrF,SAASC,eAAe,UAAU6F,MACxCR,OAAQtF,SAASC,eAAe,YAAY6F,MAC5CP,OAAQvF,SAASC,eAAe,YAAY6F,MAC5CN,aAAcxF,SAASC,eAAe,kBAAkB6F,MACxDL,aAAczF,SAASC,eAAe,kBAAkB6F,MACxDJ,WAAY1F,SAASC,eAAe,gBAAgB6F,MACpDH,WAAY3F,SAASC,eAAe,gBAAgB6F,MACpDF,SAAU5F,SAASC,eAAe,cAAc6F,MAChDD,SAAU7F,SAASC,eAAe,cAAc6F,MAEpD,CA5PAyB,OAAOC,SAASC,IACVA,EAAKC,OAASH,OAAOI,SAAShH,QAgBlCX,SAASC,eAAe,aAAa2H,iBAAiB,SAAS,WAC7D5H,SAASC,eAAe,UAAU4H,QAClC7H,SAASC,eAAe,UAAU6H,UAAW,EAC7C9H,SAASC,eAAe,aAAaG,MAAMC,QAAU,OACrDL,SAASC,eAAe,aAAaG,MAAMC,QAAU,SACrDuE,EAAQmB,MACV,IAGA/F,SAASC,eAAe,aAAa2H,iBAAiB,QAAStB,GAC/DtG,SAASC,eAAe,aAAa2H,iBAAiB,QAASP,GAvB7D,WACE,KAiDN,SAA+BU,GAE7B,IAAIC,EAAQ,EACZ,MAAMC,EAAWF,EAAKG,KAAI,CAACC,EAAK/F,KAAU,CACxCA,MAAOA,EACPgG,GAAID,EAAIpD,EAAe,OACvBO,OAAQ6C,EAAIpD,EAAe,WAC3BQ,OAAQ4C,EAAIpD,EAAe,WAC3BW,WAAYyC,EAAIpD,EAAe,gBAC/BS,aAAc2C,EAAIpD,EAAe,kBACjCU,aAAc0C,EAAIpD,EAAe,kBACjCc,SAAUsC,EAAIpD,EAAe,cAC7BsD,WAAYF,EAAIpD,EAAe,gBAC/BuD,aAAcH,EAAIpD,EAAe,kBACjCY,WAAYwC,EAAIpD,EAAe,gBAC/Ba,SAAUuC,EAAIpD,EAAe,kBAIzBwD,EAAe,CACnBC,KAAM,GACNC,sBAAuB,GACvBC,eAAgB,GAChBC,UAAW,GACXC,OAAQ,IAGVX,EAAS/F,SAAS2G,IACZN,EAAaM,EAAKtD,SACpByC,GAAS,EACTO,EAAaM,EAAKtD,QAAQuD,KAAKD,IAE/BE,QAAQC,KAAK,mBAAmBH,EAAKtD,SACvC,IAGFlD,OAAO4G,KAAKV,GAAcrG,SAASqD,IACjC,MAAM2D,EAAWX,EAAahD,GACxB4D,EAAgBnJ,SAASC,eAAe,GAAGsF,EAAO6D,QAAQ,KAAM,YAChEC,EAAYrJ,SAASC,eAAe,GAAGsF,EAAO6D,QAAQ,KAAM,YAE9DF,EAASjG,OAAS,EACpBkG,EAAcG,UAAY,+OAStBJ,EACChB,KACEW,GAAS,iJAIkBA,EAAKzG,8CACTyG,EAAKT,6CACHS,EAAKvD,iDACLuD,EAAKtD,qDACDsD,EAAKnD,2DACHM,EAAkB6C,EAAKrD,8DACvBqD,EAAKpD,yDACToD,EAAKhD,uDACHgD,EAAKR,2DACHQ,EAAKP,2DACPO,EAAKlD,uDACPkD,EAAKjD,uCACnBiD,EAAKT,4EAGTS,EAAKvD,oCACLuD,EAAKtD,oCACLS,EAAkB6C,EAAKrD,2CACvBqD,EAAKpD,mDAIhB8D,KAAK,sBAIVJ,EAAcG,UAAY,oBAG5BD,EAAUnJ,YAAcgJ,EAASjG,MAAM,IAGtBjD,SAASC,eAAe,cAChCC,YAAc8H,EAGFhI,SAASwJ,iBAAiB,cAClCtH,SAASuH,IACtBA,EAAK7B,iBAAiB,QAAS5C,EAAgB,GAEnD,CAhJQ0E,OADmBlJ,EAAAA,EAAAA,IAAa,MAAO,SAEzC,CAAE,MAAOe,GACPwH,QAAQxH,MAAM,SAAUA,EAC1B,CACD,EAPD,GAQF,G","sources":["webpack://office-addin-taskpane-js/./src/commons/common.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/./src/question_answer/qa_information.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n/* global bootstrap */\n\nexport const STATUS = Object.freeze({\n  OPEN: \"OPEN\",\n  IN_PROGRESS: \"IN_PROGRESS\",\n  WAITING_REVIEW: \"WAITING_REVIEW\",\n  WAITING_RELEASE: \"WAITING_RELEASE\",\n  RELEASED: \"RELEASED\",\n});\n\n/**\n * Converts a JavaScript Date string to an Excel date number.\n * @param {string} dateString - The date string in 'YYYY-MM-DD' format.\n * @returns {number} The Excel date number.\n */\nexport function jsDateToExcelDate(dateString) {\n  // Convert the date string to a JavaScript Date object\n  const date = new Date(dateString);\n  // Convert JavaScript Date to Excel date number\n  let excelDate = 25569.0 + (date.getTime() - date.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24);\n  return excelDate;\n}\n\n/**\n * Converts an Excel date number to a JavaScript Date object.\n * @param {number} excelDate - The Excel date number.\n * @returns {string} The date in 'YYYY-MM-DD' format, or an empty string if input is invalid.\n */\nexport function excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\nexport function convertDecimalToTime(decimal) {\n  if (decimal === null || decimal === \"\") return \"\";\n  const totalMinutes = Math.round(decimal * 24 * 60);\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n\n  const formattedHours = String(hours).padStart(2, \"0\");\n  const formattedMinutes = String(minutes).padStart(2, \"0\");\n\n  return `${formattedHours}:${formattedMinutes}`;\n}\n\n/**\n * Displays a notification message to the user.\n * @param {string} message - The message to display.\n * @param {string} type - The type of notification (e.g., 'success', 'error', 'warning').\n */\nexport function showNotification(message, type) {\n  // Get the notification element\n  const notificationEl = document.getElementById(\"notification\");\n\n  // Set the message content\n  notificationEl.textContent = message;\n\n  // Set the CSS classes for styling and positioning\n  notificationEl.className = `alert alert-${type}`;\n\n  // Make the notification visible\n  notificationEl.style.display = \"block\";\n\n  // Hide the notification after 5 seconds\n  setTimeout(() => {\n    notificationEl.style.display = \"none\";\n  }, 10000);\n}\n\nexport async function getDataTable(sheetName, tableName) {\n  try {\n    return await Excel.run(async (context) => {\n      // Get the specified sheet\n      const sheet = context.workbook.worksheets.getItem(sheetName);\n      // Get the specified table\n      const table = sheet.tables.getItem(tableName);\n      // Load the header row\n      const range = table.getRange();\n      range.load(\"values\");\n\n      await context.sync();\n      return range.values; // Trả về dữ liệu\n    });\n  } catch (error) {\n    showNotification(\"Error when reading data from \" + sheetName + \": \" + error.message, \"danger\");\n    throw error; // Ném lỗi để xử lý bên ngoài\n  }\n}\n\nexport async function getDataHeader(sheetName, tableName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0];\n  } catch (error) {\n    showNotification(\"Error when reading data from\" + sheetName + \": \" + error.message, \"danger\");\n  }\n}\n\nexport async function getIndexByColumnName(sheetName, tableName, columnName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0].indexOf(columnName);\n  } catch (error) {\n    return -1;\n  }\n}\n\nexport function getIndexRowbyTaskId(data, taskId) {\n  try {\n    const taskIndex = data.findIndex((row) => row[0] === taskId); // Tìm index của task\n    return taskIndex;\n  } catch (error) {\n    return -1;\n  }\n}\nexport function updateDataTable(sheetName, tableName, rowIndex, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo map từ tên cột đến index\n        let columnIndexMap = {};\n        headerRow.forEach((columnName, index) => {\n          columnIndexMap[columnName] = index;\n        });\n\n        // Cập nhật các giá trị tại vị trí chỉ định\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = columnIndexMap[columnName];\n            if (columnIndex !== undefined) {\n              range.values[rowIndex][columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Chỉ cập nhật đúng range ứng với rowIndex\n        let rowRange = table.getDataBodyRange().getRow(rowIndex);\n        rowRange.values = [range.values[rowIndex]];\n\n        return context.sync().then(() => {\n          resolve(\"Data updated successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when updating data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function insertDataTable(sheetName, tableName, updateDict) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Lấy sheet được chỉ định\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Lấy table được chỉ định\n      let table = sheet.tables.getItem(tableName);\n      // Lấy range của table\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        // Lấy header row\n        let headerRow = range.values[0];\n        // Tạo một mảng mới cho hàng cần thêm\n        let newRow = new Array(headerRow.length).fill(\"\");\n\n        // Cập nhật các giá trị từ updateDict\n        for (let columnName in updateDict) {\n          if (Object.prototype.hasOwnProperty.call(updateDict, columnName)) {\n            let columnIndex = headerRow.indexOf(columnName);\n            if (columnIndex !== -1) {\n              newRow[columnIndex] = updateDict[columnName];\n            } else {\n              reject(`Column name \"${columnName}\" not found`);\n              return;\n            }\n          }\n        }\n\n        // Thêm hàng mới vào cuối table\n        table.rows.add(null, [newRow]);\n\n        return context.sync().then(() => {\n          resolve(\"Data inserted successfully\");\n        });\n      });\n    }).catch((error) => {\n      showNotification(\"Error when inserting data in \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport function mapData(\n  SheetNameSource,\n  TableNameSource,\n  KeyColumnNameSource,\n  ListColumnNameSource,\n  SheetNameTarget,\n  TableNameTarget,\n  KeyColumnNameTarget,\n  ListColumnNameTarget\n) {\n  return Excel.run((context) => {\n    const sourceSheet = context.workbook.worksheets.getItem(SheetNameSource);\n    const sourceTable = sourceSheet.tables.getItem(TableNameSource);\n    const targetSheet = context.workbook.worksheets.getItem(SheetNameTarget);\n    const targetTable = targetSheet.tables.getItem(TableNameTarget);\n\n    // Load the data from source and target tables\n    const sourceRange = sourceTable.getDataBodyRange();\n    const targetRange = targetTable.getDataBodyRange();\n\n    sourceRange.load(\"values\");\n    targetRange.load(\"values\");\n\n    // Load header rows\n    const sourceHeaderRange = sourceTable.getHeaderRowRange();\n    const targetHeaderRange = targetTable.getHeaderRowRange();\n    sourceHeaderRange.load(\"values\");\n    targetHeaderRange.load(\"values\");\n\n    return context\n      .sync()\n      .then(() => {\n        const sourceData = sourceRange.values;\n        const targetData = targetRange.values;\n        const targetKeys = new Set(targetData.map((row) => row[0])); // Assuming KeyColumnNameTarget is the first column\n\n        // Get indexes for columns\n        const headersSource = sourceHeaderRange.values[0];\n        const headersTarget = targetHeaderRange.values[0];\n        const keyColIndexSource = headersSource.indexOf(KeyColumnNameSource);\n        const listColIndexesSource = ListColumnNameSource.map((col) => headersSource.indexOf(col));\n        const keyColIndexTarget = headersTarget.indexOf(KeyColumnNameTarget);\n        const listColIndexesTarget = ListColumnNameTarget.map((col) => headersTarget.indexOf(col));\n\n        const newRows = [];\n\n        // Loop through source data to find new entries\n        sourceData.forEach((row) => {\n          const keyValue = row[keyColIndexSource];\n\n          if (!targetKeys.has(keyValue)) {\n            let newRow = new Array(headersTarget.length).fill(\"\");\n            listColIndexesSource.forEach((sourceIndex, index) => {\n              const targetIndex = listColIndexesTarget[index];\n              newRow[targetIndex] = row[sourceIndex];\n            });\n            newRows.push(newRow);\n          }\n          // else {\n          //   const taskIndex = targetData.findIndex((row) => row[keyColIndexTarget] === keyValue);\n          //   if (taskIndex !== -1) {\n          //     const updatedRow = [...targetData[taskIndex]];\n          //     listColIndexesSource.forEach((sourceIndex, index) => {\n          //       const targetIndex = listColIndexesTarget[index];\n          //       updatedRow[targetIndex] = row[sourceIndex];\n          //     });\n          //     targetRange.getRow(taskIndex).values = [updatedRow];\n          //   }\n          // }\n        });\n\n        // If there are new rows to insert, add them to the target table\n        if (newRows.length > 0) {\n          targetTable.rows.add(null, newRows);\n          return context.sync().then(() => {\n            console.log(\"Mapping completed. New rows inserted:\", newRows.length);\n          });\n        } else {\n          console.log(\"No new rows to insert.\");\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  });\n}\n\nexport function openHtmlFile(filePath) {\n  Office.context.ui.displayDialogAsync(filePath, { height: 50, width: 50 }, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n      console.error(\"Failed to open dialog: \" + asyncResult.error.message);\n    } else {\n      console.log(\"Dialog opened successfully.\");\n      var dialog = asyncResult.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, function (message) {\n        console.log(\"Message from dialog: \" + message.message);\n      });\n      dialog.addEventHandler(Office.EventType.DialogEventReceived, function (event) {\n        console.log(\"Dialog event received: \" + event.error);\n      });\n    }\n  });\n}\n\n// Function to convert a 2D array into JSON format\nexport function convertToJSON(array) {\n  // Extract the first row of the array as headers (keys for the JSON objects)\n  const headers = array[0];\n  // Extract the rest of the rows as data\n  const data = array.slice(1);\n\n  // Map through each row in the data array\n  return data.map((row) => {\n    let obj = {};\n    // Iterate over each value in the row and assign it to the corresponding header\n    row.forEach((value, index) => {\n      obj[headers[index]] = value; // Assign the value to the corresponding key (header)\n    });\n    return obj; // Return the object for each row\n  });\n}\n\nexport function isValidURL(text) {\n  const urlPattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n      \"((([a-zA-Z\\\\d]([a-zA-Z\\\\d-]*[a-zA-Z\\\\d])*)\\\\.)+[a-zA-Z]{2,}|\" + // domain name\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n      \"(\\\\:\\\\d+)?(\\\\/[-a-zA-Z\\\\d%_.~+]*)*\" + // port and path\n      \"(\\\\?[;&a-zA-Z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-zA-Z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!urlPattern.test(text);\n}\n\n/*Function for timesheet*/\nexport async function logWork(data) {\n  try {\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let rowIndex = -1;\n      let message = \"\";\n      // for (let i = 0; i < rows.items.length; i++) {\n      //   const row = rows.items[i].values[0];\n\n      //   if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n      //     rowIndex = i;\n      //     break;\n      //   }\n      // }\n\n      if (Number(data.rowIndex) !== -1) {\n        updateTimeSheet(context, table, data);\n        message = \"Time sheet updated successfully.\";\n      } else {\n        insertTimeSheet(context, table, data);\n        message = \"New time sheet entry added successfully.\";\n      }\n\n      await context.sync();\n      showNotification(message, \"success\");\n    });\n  } catch (error) {\n    console.error(error);\n    showNotification(\"Time sheet update failed.\" + error + \"with data: \" + JSON.stringify(data), \"error\");\n  }\n}\n\nfunction updateTimeSheet(context, table, data) {\n  const row = table.rows.getItemAt(Number(data.rowIndex));\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  row.values = [[null, null, null, data.startTime, data.endTime, totalTime, data.desc]];\n}\n\nfunction insertTimeSheet(context, table, data) {\n  let totalTime = calculateWorkTime(data.startTime, data.endTime);\n  table.rows.add(null, [[data.date, data.taskID, data.pic, data.startTime, data.endTime, totalTime, data.desc]]);\n}\nexport function calculateWorkTime(startTime, endTime) {\n  // Kiểm tra nếu startTime và endTime đều không rỗng\n  if (startTime && endTime) {\n    // Chuyển đổi thời gian từ chuỗi sang đối tượng Date\n    const start = new Date(`1970-01-01T${startTime}:00`);\n    const end = new Date(`1970-01-01T${endTime}:00`);\n    const lunchStart = new Date(`1970-01-01T12:00:00`);\n    const lunchEnd = new Date(`1970-01-01T13:00:00`);\n\n    // Tính toán thời gian làm việc\n    let totalTime = (end - start) / (1000 * 60 * 60); // Chuyển sang giờ\n\n    // Trừ thời gian nghỉ trưa nếu nó nằm trong khoảng thời gian làm việc\n    if (start < lunchStart && end > lunchEnd) {\n      totalTime -= 1; // Trừ 1 giờ nghỉ trưa\n    } else if (start < lunchEnd && end > lunchEnd) {\n      totalTime -= (lunchEnd - start) / (1000 * 60 * 60); // Trừ thời gian từ start đến hết nghỉ trưa\n    } else if (start < lunchStart && end > lunchStart) {\n      totalTime -= (end - lunchStart) / (1000 * 60 * 60); // Trừ thời gian từ bắt đầu nghỉ trưa đến end\n    }\n\n    return totalTime;\n  } else {\n    return 0; // Nếu startTime hoặc endTime rỗng, trả về 0\n  }\n}\nexport async function checkTaskIdExists(data) {\n  try {\n    return await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(\"Timesheet\");\n      const table = sheet.tables.getItem(\"TblTimesheet\");\n      const rows = table.rows.load(\"values\");\n\n      await context.sync();\n\n      let result = {\n        rowIndex: -1,\n        startTime: null,\n        endTime: null,\n      };\n      for (let i = 0; i < rows.items.length; i++) {\n        const row = rows.items[i].values[0];\n        if (excelDateToJSDate(row[0]) === data.date && row[1] === data.taskID && row[2] === data.pic) {\n          result.rowIndex = i;\n          result.startTime = row[3];\n          result.endTime = row[4];\n          break;\n        }\n      }\n\n      return result;\n    });\n  } catch (error) {\n    console.error(error);\n    return {\n      rowIndex: -1,\n      startTime: null,\n      endTime: null,\n    };\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\nimport { insertDataTable, updateDataTable, getDataTable, openHtmlFile } from \"../commons/common.js\";\n\n/* global console, document, Excel, Office */\n/* global bootstrap */\n// You can specify which plugins you need\n// Get the modal\nvar qaModal = new bootstrap.Modal(document.getElementById(\"qaModal\"));\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    initializeEventHandlers();\n    // Call getDataTable and process the data\n    (async () => {\n      try {\n        const data = await getDataTable(\"Q&A\", \"TblQA\");\n        processAndDisplayData(data);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    })();\n  }\n});\n\nfunction initializeEventHandlers() {\n  // Add event listener for the \"addNewBtn\" button\n  document.getElementById(\"addNewBtn\").addEventListener(\"click\", function () {\n    document.getElementById(\"qaForm\").reset();\n    document.getElementById(\"f_qaid\").readOnly = false;\n    document.getElementById(\"updateBtn\").style.display = \"none\";\n    document.getElementById(\"createBtn\").style.display = \"inline\";\n    qaModal.show();\n  });\n\n  // Add event listener for the \"createBtn\" button\n  document.getElementById(\"createBtn\").addEventListener(\"click\", insertNewQA);\n  document.getElementById(\"updateBtn\").addEventListener(\"click\", updateQA);\n\n  // For Testing\n  // document.getElementById(\"btnTest1\").addEventListener(\"click\", test_insert);\n  // document.getElementById(\"btnTest\").addEventListener(\"click\", function () {\n  //   openHtmlFile(\"https://localhost:3000/calendar.html\");\n  // });\n}\n\n// Hàm lấy index của cột theo tên\nfunction getColumnIndex(columnName) {\n  const headers = [\n    \"ID\",\n    \"TaskID\",\n    \"Status\",\n    \"Question_VN\",\n    \"Question_Date\",\n    \"Raised_Person\",\n    \"Answer_VN\",\n    \"Answer_Date\",\n    \"Answer_Person\",\n    \"Question_JP\",\n    \"Answer_JP\",\n  ];\n  return headers.indexOf(columnName);\n}\n// Function to process and display data\nfunction processAndDisplayData(data) {\n  // Lấy dữ liệu và kèm theo index\n  let total = 0;\n  const taskData = data.map((row, index) => ({\n    index: index,\n    id: row[getColumnIndex(\"ID\")],\n    taskId: row[getColumnIndex(\"TaskID\")],\n    status: row[getColumnIndex(\"Status\")],\n    questionVN: row[getColumnIndex(\"Question_VN\")],\n    questionDate: row[getColumnIndex(\"Question_Date\")],\n    raisedPerson: row[getColumnIndex(\"Raised_Person\")],\n    answerVN: row[getColumnIndex(\"Answer_VN\")],\n    answerDate: row[getColumnIndex(\"Answer_Date\")],\n    answerPerson: row[getColumnIndex(\"Answer_Person\")],\n    questionJP: row[getColumnIndex(\"Question_JP\")],\n    answerJP: row[getColumnIndex(\"Answer_JP\")],\n  }));\n  // document.getElementById(\"test_display\").innerHTML = JSON.stringify(taskData);\n\n  const statusGroups = {\n    Open: [],\n    WaitingClientFeedback: [],\n    WaitingConfirm: [],\n    Confirmed: [],\n    Closed: [],\n  };\n\n  taskData.forEach((task) => {\n    if (statusGroups[task.status]) {\n      total += 1;\n      statusGroups[task.status].push(task);\n    } else {\n      console.warn(`Unknown status: ${task.status}`);\n    }\n  });\n\n  Object.keys(statusGroups).forEach((status) => {\n    const taskList = statusGroups[status];\n    const taskContainer = document.getElementById(`${status.replace(/ /g, \"\")}Tasks`);\n    const taskCount = document.getElementById(`${status.replace(/ /g, \"\")}Count`);\n\n    if (taskList.length > 0) {\n      taskContainer.innerHTML = `\n    <table class='table table-bordered'>\n        <tr>\n            <th>ID</th>\n            <th>TaskID</th>\n            <th>Status</th>\n            <th>Question Date</th>\n            <th>Raised Person</th>\n        </tr>\n        ${taskList\n          .map(\n            (task) => `\n            <tr>\n                <td>\n                    <a href=\"#\" class=\"openModal link-info\" \n                       data-rowIndex=\"${task.index}\" \n                       data-qaid=\"${task.id}\" \n                       data-taskid=\"${task.taskId}\" \n                       data-status=\"${task.status}\" \n                       data-questionVN=\"${task.questionVN}\" \n                       data-questiondate=\"${excelDateToJSDate(task.questionDate)}\" \n                       data-raisedperson=\"${task.raisedPerson}\" \n                       data-answerVN=\"${task.answerVN}\" \n                       data-answerDate=\"${task.answerDate}\" \n                       data-answerPerson=\"${task.answerPerson}\" \n                       data-questionJP=\"${task.questionJP}\" \n                       data-answerJP=\"${task.answerJP}\">\n                        ${task.id}\n                    </a>\n                </td>\n                <td>${task.taskId}</td>\n                <td>${task.status}</td>\n                <td>${excelDateToJSDate(task.questionDate)}</td>\n                <td>${task.raisedPerson}</td>\n            </tr>\n        `\n          )\n          .join(\"\")}\n    </table>\n`;\n    } else {\n      taskContainer.innerHTML = \"No Q&A available.\";\n    }\n\n    taskCount.textContent = taskList.length;\n  });\n\n  const totalCount = document.getElementById(\"totalCount\");\n  totalCount.textContent = total;\n\n  // Add listener\n  const openModalLinks = document.querySelectorAll(\".openModal\");\n  openModalLinks.forEach((link) => {\n    link.addEventListener(\"click\", handleModalOpen);\n  });\n}\n\nfunction handleModalOpen(event) {\n  event.preventDefault();\n  const rowIndex = this.getAttribute(\"data-rowIndex\");\n  const qaid = this.getAttribute(\"data-qaid\");\n  const taskId = this.getAttribute(\"data-taskid\");\n  const status = this.getAttribute(\"data-status\");\n  const questionDate = this.getAttribute(\"data-questiondate\");\n  const raisedPerson = this.getAttribute(\"data-raisedperson\");\n  const questionVN = this.getAttribute(\"data-questionVN\");\n  const questionJP = this.getAttribute(\"data-questionJP\");\n  const answerJP = this.getAttribute(\"data-answerJP\");\n  const answerVN = this.getAttribute(\"data-answerVN\");\n  const answerDate = this.getAttribute(\"data-answerDate\");\n  const answerPerson = this.getAttribute(\"data-answerPerson\");\n\n  document.getElementById(\"f_rowIndex\").value = rowIndex - 1;\n  document.getElementById(\"f_qaid\").value = qaid;\n  document.getElementById(\"f_taskId\").value = taskId;\n  document.getElementById(\"f_status\").value = status;\n  document.getElementById(\"f_questionDate\").value = questionDate;\n  document.getElementById(\"f_raisedPerson\").value = raisedPerson;\n  document.getElementById(\"f_questionVN\").value = questionVN;\n  document.getElementById(\"f_questionJP\").value = questionJP;\n  document.getElementById(\"f_answerJP\").value = answerJP;\n  document.getElementById(\"f_answerVN\").value = answerVN;\n  document.getElementById(\"updateBtn\").style.display = \"inline\";\n  document.getElementById(\"createBtn\").style.display = \"none\";\n  qaModal.show();\n}\n\nfunction excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\n\nfunction genQAId(max) {\n  return max + 1;\n}\n\nfunction insertNewQA() {\n  const formValues = getFormValues();\n\n  const updateDict = {\n    ID: formValues.qaid,\n    TaskID: formValues.taskId,\n    Status: formValues.status,\n    Question_VN: formValues.questionVN,\n    Question_Date: formValues.questionDate,\n    Raised_Person: formValues.raisedPerson,\n    Answer_VN: formValues.answerVN,\n    Answer_Date: formValues.answerVN,\n    Answer_Person: formValues.Answer_Person,\n    Question_JP: formValues.questionJP,\n    Answer_JP: formValues.answerJP,\n  };\n  insertDataTable(\"Q&A\", \"TblQA\", updateDict);\n  qaModal.hide();\n}\n\nfunction updateQA() {\n  const formValues = getFormValues();\n  const rowIndex = Number(formValues.rowIndex);\n  // document.getElementById(\"test_display\").innerHTML = formValues.rowIndex;\n  const updateDict = {\n    ID: formValues.qaid,\n    TaskID: formValues.taskId,\n    Status: formValues.status,\n    Question_VN: formValues.questionVN,\n    Question_Date: formValues.questionDate,\n    Raised_Person: formValues.raisedPerson,\n    Answer_VN: formValues.answerVN,\n    Answer_Date: formValues.answerVN,\n    Answer_Person: formValues.Answer_Person,\n    Question_JP: formValues.questionJP,\n    Answer_JP: formValues.answerJP,\n  };\n  updateDataTable(\"Q&A\", \"TblQA\", rowIndex, updateDict);\n  qaModal.hide();\n}\n\nfunction getFormValues() {\n  return {\n    rowIndex: document.getElementById(\"f_rowIndex\").value,\n    qaid: document.getElementById(\"f_qaid\").value,\n    taskId: document.getElementById(\"f_taskId\").value,\n    status: document.getElementById(\"f_status\").value,\n    questionDate: document.getElementById(\"f_questionDate\").value,\n    raisedPerson: document.getElementById(\"f_raisedPerson\").value,\n    questionVN: document.getElementById(\"f_questionVN\").value,\n    questionJP: document.getElementById(\"f_questionJP\").value,\n    answerJP: document.getElementById(\"f_answerJP\").value,\n    answerVN: document.getElementById(\"f_answerVN\").value,\n  };\n}\n\nfunction test_insert() {\n  const data = {\n    Account: \"Account-01\",\n    FullName: \"Dummy\",\n  };\n  insertDataTable(\"Setting\", \"Table6\", data);\n}\n"],"names":["showNotification","message","type","notificationEl","document","getElementById","textContent","className","style","display","setTimeout","async","getDataTable","sheetName","tableName","Excel","run","range","context","workbook","worksheets","getItem","tables","getRange","load","sync","values","error","updateDataTable","rowIndex","updateDict","Promise","resolve","reject","table","then","headerRow","columnIndexMap","forEach","columnName","index","Object","prototype","hasOwnProperty","call","columnIndex","undefined","getDataBodyRange","getRow","catch","insertDataTable","newRow","Array","length","fill","indexOf","rows","add","freeze","OPEN","IN_PROGRESS","WAITING_REVIEW","WAITING_RELEASE","RELEASED","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","qaModal","bootstrap","Modal","getColumnIndex","handleModalOpen","event","preventDefault","this","getAttribute","qaid","taskId","status","questionDate","raisedPerson","questionVN","questionJP","answerJP","answerVN","value","show","excelDateToJSDate","excelDate","isNaN","Date","toISOString","split","insertNewQA","formValues","getFormValues","ID","TaskID","Status","Question_VN","Question_Date","Raised_Person","Answer_VN","Answer_Date","Answer_Person","Question_JP","Answer_JP","hide","updateQA","Number","Office","onReady","info","host","HostType","addEventListener","reset","readOnly","data","total","taskData","map","row","id","answerDate","answerPerson","statusGroups","Open","WaitingClientFeedback","WaitingConfirm","Confirmed","Closed","task","push","console","warn","keys","taskList","taskContainer","replace","taskCount","innerHTML","join","querySelectorAll","link","processAndDisplayData"],"sourceRoot":""}