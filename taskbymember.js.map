{"version":3,"file":"taskbymember.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskbymember/common.js","webpack://office-addin-taskpane-js/./src/taskbymember/constant.js","webpack://office-addin-taskpane-js/./src/taskbymember/taskbymember.js"],"sourcesContent":["/**\n * Converts a JavaScript Date string to an Excel date number.\n * @param {string} dateString - The date string in 'YYYY-MM-DD' format.\n * @returns {number} The Excel date number.\n */\nexport function jsDateToExcelDate(dateString) {\n  // Convert the date string to a JavaScript Date object\n  const date = new Date(dateString);\n  // Convert JavaScript Date to Excel date number\n  let excelDate = 25569.0 + (date.getTime() - date.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24);\n  return excelDate;\n}\n\n/**\n * Converts an Excel date number to a JavaScript Date object.\n * @param {number} excelDate - The Excel date number.\n * @returns {string} The date in 'YYYY-MM-DD' format, or an empty string if input is invalid.\n */\nexport function excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\n\n/**\n * Displays a notification message to the user.\n * @param {string} message - The message to display.\n * @param {string} type - The type of notification (e.g., 'success', 'error', 'warning').\n */\nexport function showNotification(message, type) {\n  // Get the notification element\n  const notificationEl = document.getElementById(\"notification\");\n\n  // Set the message content\n  notificationEl.textContent = message;\n\n  // Set the CSS classes for styling and positioning\n  notificationEl.className = `alert alert-${type} position-fixed bottom-0 start-50 translate-middle-x mb-3`;\n\n  // Make the notification visible\n  notificationEl.classList.remove(\"d-none\");\n\n  // Hide the notification after 3 seconds\n  // eslint-disable-next-line no-undef\n  setTimeout(() => {\n    notificationEl.classList.add(\"d-none\");\n  }, 3000);\n}\n\nexport async function getDataTable(sheetName, tableName) {\n  try {\n    const data = await Excel.run(async (context) => {\n      // Get the specified sheet\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Get the specified table\n      let table = sheet.tables.getItem(tableName);\n      // Load the header row\n      let range = table.getRange();\n      range.load(\"values\");\n\n      await context.sync();\n      return range.values;\n    });\n    return data;\n  } catch (error) {\n    showNotification(\"Error when reading data from\" + sheetName + \": \" + error.message, \"danger\");\n  }\n}\n\nexport async function getDataHeader(sheetName, tableName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0];\n  } catch (error) {\n    showNotification(\"Error when reading data from\" + sheetName + \": \" + error.message, \"danger\");\n  }\n}\n\nexport async function getIndexByColumnName(sheetName, tableName, columnName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0].indexOf(columnName);\n  } catch (error) {\n    return -1;\n  }\n}\n","export const STATUS = Object.freeze({\n  OPEN: \"OPEN\",\n  IN_PROGRESS: \"IN_PROGRESS\",\n  WAITING_REVIEW: \"WAITING_REVIEW\",\n  WAITING_RELEASE: \"WAITING_RELEASE\",\n  RELEASED: \"RELEASED\",\n});\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n// You can specify which plugins you need\nimport { excelDateToJSDate, jsDateToExcelDate, showNotification, getIndexByColumnName } from \"./common.js\";\nimport { STATUS } from \"./constant.js\";\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // initData();\n\n    loadAccounts();\n    getTasksByAccount();\n    document.getElementById(\"accountSelect\").onchange = loadFullname;\n\n    // Add click event listener to the \"Update Progress\" button\n    document.getElementById(\"btnUpdateProgress\").addEventListener(\"click\", function () {\n      // Get the task ID from the input field\n      const taskId = document.getElementById(\"progressTaskID\").value;\n\n      // Create an object with updated task data from form inputs\n      const taskData = {\n        startDate: document.getElementById(\"aStartDate\").value,\n        endDate: document.getElementById(\"aEndDate\").value,\n        effort: document.getElementById(\"aEffort\").value,\n        percentCompleted: document.getElementById(\"percentACompleted\").value,\n        releaseDate: document.getElementById(\"aReleaseDate\").value,\n      };\n\n      // Fetch the task by ID (possibly to validate or prepare for update)\n      getTaskByID(taskId);\n\n      // Update the task details with the new data\n      updateTaskDetails(taskId, taskData);\n\n      // Close the modal after update\n      let myModalElement = document.getElementById(\"updateProgressModal\");\n\n      // Try to get an instance of the Bootstrap modal\n      // eslint-disable-next-line no-undef\n      let myModal = bootstrap.Modal.getInstance(myModalElement);\n\n      if (myModal) {\n        // If an instance exists, hide the modal\n        myModal.hide();\n      } else {\n        // If no instance exists, create a new one and hide it\n        // eslint-disable-next-line no-undef\n        let newModal = new bootstrap.Modal(myModalElement);\n        newModal.hide();\n      }\n    });\n\n    let myModalElement = document.getElementById(\"updateProgressModal\");\n    myModalElement.addEventListener(\"hidden.bs.modal\", function () {\n      // Các hành động cần thiết sau khi modal đã đóng\n      console.log(\"Modal đã đóng.\");\n    });\n\n    // Wait for the DOM to be fully loaded before executing the script\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      // Set the default date for the logwork form to today's date\n      setDefaultLogworkDate();\n    });\n  }\n});\n\n/**\n * Sets the default date for the logwork form to today's date.\n */\nfunction setDefaultLogworkDate() {\n  // Get today's date in YYYY-MM-DD format\n  const today = getTodayDate();\n\n  // Set the value of the date input field\n  const dateInput = document.getElementById(\"logworkForm_date\");\n  if (dateInput) {\n    dateInput.value = today;\n  } else {\n    console.warn(\"Logwork date input field not found\");\n  }\n}\n\n/**\n * Returns today's date in YYYY-MM-DD format.\n * @returns {string} Today's date in YYYY-MM-DD format\n */\nfunction getTodayDate() {\n  return new Date().toISOString().split(\"T\")[0];\n}\n\nfunction updateTaskDetails(taskID, taskData) {\n  Excel.run(function (context) {\n    const sheet = context.workbook.worksheets.getItem(\"WBS\");\n    const table = sheet.tables.getItem(\"TblWbs\");\n    const range = table.getDataBodyRange();\n    range.load(\"values\");\n\n    return context.sync().then(function () {\n      const data = range.values;\n      const taskIndex = data.findIndex((row) => row[0] === taskID); // Tìm index của task\n\n      if (taskIndex !== -1) {\n        // Tạo một mảng mới với các giá trị cập nhật\n        const updatedRow = [...data[taskIndex]];\n        updatedRow[9] = jsDateToExcelDate(taskData.startDate);\n        updatedRow[10] = jsDateToExcelDate(taskData.endDate);\n        updatedRow[11] = taskData.effort;\n        updatedRow[12] = taskData.percentCompleted / 100;\n        updatedRow[13] = jsDateToExcelDate(taskData.releaseDate);\n\n        // Cập nhật toàn bộ hàng\n        range.getRow(taskIndex).values = [updatedRow];\n\n        return context.sync().then(function () {\n          showNotification(\"Update Successfully\", \"success\");\n        });\n      } else {\n        showNotification(\"Không tìm thấy thông tin: \" + taskID, \"danger\");\n      }\n    });\n  }).catch(function (error) {\n    console.log(error);\n    showNotification(\"Error updating task details: \" + error.message, \"danger\");\n  });\n}\n\nfunction getTaskByID(taskId) {\n  Excel.run(function (context) {\n    const sheet = context.workbook.worksheets.getItem(\"WBS\");\n\n    const table = sheet.tables.getItem(\"TblWbs\");\n    const range = table.getDataBodyRange();\n    range.load(\"values\");\n\n    return context.sync().then(function () {\n      const values = range.values;\n      const task = values.find((row) => row[0] === taskId); // Tìm task dựa trên TaskID\n      if (task) {\n        document.querySelector(\"#progressForm #progressTaskID\").value = taskId; // A.StartDate\n        document.querySelector(\"#progressForm #aStartDate\").value = excelDateToJSDate(task[9]); // A.StartDate\n        document.querySelector(\"#progressForm #aEndDate\").value = excelDateToJSDate(task[10]); // A.EndDate\n        document.querySelector(\"#progressForm #aEffort\").value = task[11]; // A.Effort\n        document.querySelector(\"#progressForm #percentACompleted\").value = task[12] * 100; // %A.Completed\n        document.querySelector(\"#progressForm #aReleaseDate\").value = excelDateToJSDate(task[13]); // A.ReleaseDate\n      } else {\n        showNotification(\"không tìm thấy thông tin: \" + taskId, \"danger\");\n      }\n    });\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n\nfunction initData() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Setting\");\n    var range = sheet.getRange(\"B1:B5\");\n\n    range.load(\"values\");\n    return context.sync().then(function () {\n      var project_code = range.values[0];\n      var project_manager = range.values[1];\n      document.getElementById(\"v_project_code\").innerText = project_code;\n      document.getElementById(\"v_project_manager\").innerText = project_manager;\n    });\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n}\n\nfunction loadAccounts() {\n  Excel.run(function (context) {\n    let sheet = context.workbook.worksheets.getItem(\"Resource\");\n    let table = sheet.tables.getItem(\"TblResource\");\n    let range = table.getRange();\n\n    range.load(\"values\");\n\n    return context.sync().then(function () {\n      let data = range.values; // Lấy toàn bộ giá trị trong bảng\n      let accountSelect = document.getElementById(\"accountSelect\");\n      let headers = data[0];\n      let accountIndex = headers.indexOf(\"Account\");\n      // Lặp qua dữ liệu để thêm vào combobox\n      for (let i = 1; i < data.length; i++) {\n        // Bỏ qua hàng tiêu đề\n        let account = data[i][accountIndex]; // Column Account (index 1)\n        let option = document.createElement(\"option\");\n        option.value = account;\n        option.text = account;\n        accountSelect.appendChild(option);\n      }\n    });\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n}\n\nfunction loadFullname() {\n  let accountSelect = document.getElementById(\"accountSelect\");\n  let selectedAccount = accountSelect.value;\n  let fullnameDisplay = document.getElementById(\"fullnameDisplay\");\n\n  if (selectedAccount) {\n    Excel.run(function (context) {\n      let sheet = context.workbook.worksheets.getItem(\"Resource\");\n      let table = sheet.tables.getItem(\"TblResource\");\n      let range = table.getRange();\n\n      range.load(\"values\");\n\n      return context.sync().then(function () {\n        let data = range.values;\n        let headers = data[0];\n\n        // Tìm fullname tương ứng với account đã chọn\n        for (let i = 1; i < data.length; i++) {\n          // Bỏ qua hàng tiêu đề\n          if (data[i][headers.indexOf(\"Account\")] === selectedAccount) {\n            // Column Account (index 1)\n            fullnameDisplay.innerText = data[i][headers.indexOf(\"Fullname\")]; // Column Fullname (index 2)\n            getTasksByAccount();\n            return;\n          }\n        }\n        fullnameDisplay.innerText = \"\"; // Nếu không tìm thấy, xóa nội dung\n      });\n    }).catch(function (error) {\n      console.log(\"Error: \" + error);\n    });\n  } else {\n    fullnameDisplay.innerText = \"\"; // Nếu không chọn gì, xóa nội dung\n    getTasksByAccount();\n  }\n}\n\nfunction getTasksByAccount() {\n  const accountSelect = document.getElementById(\"accountSelect\");\n  const selectedAccount = accountSelect.value;\n\n  Excel.run(function (context) {\n    const sheet = context.workbook.worksheets.getItem(\"WBS\");\n    const table = sheet.tables.getItem(\"TblWbs\");\n    const range = table.getRange();\n    range.load(\"values\");\n    return context.sync().then(function () {\n      const data = range.values;\n\n      // Nhóm dữ liệu theo trạng thái\n      const groupedTasks = {\n        \"Tổng nhiệm vụ\": [],\n        \"Task đang làm\": [],\n        \"Task chưa làm\": [],\n        \"Task chờ review\": [],\n        \"Task chờ release\": [],\n        \"Task đã release\": [],\n      };\n\n      data.forEach((row) => {\n        const pic = row[3].trim().toLowerCase(); // Đặt chỉ số cột PIC\n        const completed = row[12]; // Đặt chỉ số cột Completed\n        if (pic === selectedAccount.trim().toLowerCase()) {\n          groupedTasks[\"Tổng nhiệm vụ\"].push(row);\n          if (completed > 0 && completed < 0.8) {\n            groupedTasks[\"Task đang làm\"].push(row);\n          } else if (completed === 0) {\n            groupedTasks[\"Task chưa làm\"].push(row);\n          } else if (completed === 0.8) {\n            groupedTasks[\"Task chờ review\"].push(row);\n          } else if (completed === 0.9) {\n            groupedTasks[\"Task chờ release\"].push(row);\n          } else if (completed === 1) {\n            groupedTasks[\"Task đã release\"].push(row);\n          }\n        }\n        if (selectedAccount.trim().toLowerCase() === \"\") {\n          groupedTasks[\"Tổng nhiệm vụ\"].push(row);\n          if (completed > 0 && completed < 0.8) {\n            groupedTasks[\"Task đang làm\"].push(row);\n          } else if (completed === 0) {\n            groupedTasks[\"Task chưa làm\"].push(row);\n          } else if (completed === 0.8) {\n            groupedTasks[\"Task chờ review\"].push(row);\n          } else if (completed === 0.9) {\n            groupedTasks[\"Task chờ release\"].push(row);\n          } else if (completed === 1) {\n            groupedTasks[\"Task đã release\"].push(row);\n          }\n        }\n      });\n      // Hiển thị kết quả ra HTML\n      // Cập nhật hiển thị số lượng và nội dung cho các nhóm tác vụ\n      const totalT = groupedTasks[\"Tổng nhiệm vụ\"].length;\n      const doingCount = groupedTasks[\"Task đang làm\"].length;\n      const notDoneCount = groupedTasks[\"Task chưa làm\"].length;\n      const reviewCount = groupedTasks[\"Task chờ review\"].length;\n      const releaseCount = groupedTasks[\"Task chờ release\"].length;\n      const releasedCount = groupedTasks[\"Task đã release\"].length;\n\n      document.getElementById(\"totalTasksCount\").innerText = totalT;\n      document.getElementById(\"doingCount\").innerText = doingCount;\n      document.getElementById(\"notDoneCount\").innerText = notDoneCount;\n      document.getElementById(\"reviewCount\").innerText = reviewCount;\n      document.getElementById(\"releaseCount\").innerText = releaseCount;\n      document.getElementById(\"releasedCount\").innerText = releasedCount;\n\n      // Progress Bar\n      document.getElementById(\"taskProgressBar\").innerHTML = addProgressBar(\n        totalT,\n        notDoneCount,\n        doingCount,\n        reviewCount,\n        releaseCount,\n        releasedCount\n      );\n\n      // Cập nhật nội dung cho từng nhóm tác vụ\n      document.getElementById(\"notDoneTasks\").innerHTML = createTaskTable(groupedTasks[\"Task chưa làm\"], STATUS.OPEN);\n      document.getElementById(\"doingTasks\").innerHTML = createTaskTable(\n        groupedTasks[\"Task đang làm\"],\n        STATUS.IN_PROGRESS\n      );\n      document.getElementById(\"reviewTasks\").innerHTML = createTaskTable(\n        groupedTasks[\"Task chờ review\"],\n        STATUS.WAITING_REVIEW\n      );\n      document.getElementById(\"releaseTasks\").innerHTML = createTaskTable(\n        groupedTasks[\"Task chờ release\"],\n        STATUS.WAITING_RELEASE\n      );\n      document.getElementById(\"releasedTasks\").innerHTML = createTaskTable(groupedTasks[\"Task đã release\"]);\n      // Gán sự kiện cho các thẻ <a> mới được thêm vào\n      addModalEventListeners();\n\n      addBtnTaskStartListeners(STATUS.OPEN);\n      addBtnTaskStartListeners(STATUS.IN_PROGRESS);\n      addBtnTaskStartListeners(STATUS.WAITING_REVIEW);\n      addBtnTaskStartListeners(STATUS.WAITING_RELEASE);\n    });\n  }).catch(function (error) {\n    console.error(\"Error retrieving tasks:\", error);\n  });\n}\nfunction addProgressBar(total, notStarted, inProgress, waitForReview, waitForRelease, released) {\n  let progressBarHTML = `\n      <div class='progress-bar progress-bar-striped bg-danger'\n           role='progressbar'\n           style='width: ${(notStarted / total) * 100}%'\n           aria-valuenow='${(notStarted / total) * 100}'\n           aria-valuemin='0'\n           aria-valuemax='100'>\n          ${((notStarted / total) * 100).toFixed(2)}%\n      </div>\n`;\n\n  progressBarHTML += `\n      <div class='progress-bar progress-bar-striped bg-warning'\n           role='progressbar'\n           style='width: ${(inProgress / total) * 100}%'\n           aria-valuenow='${(inProgress / total) * 100}'\n           aria-valuemin='0'\n           aria-valuemax='100'>\n          ${((inProgress / total) * 100).toFixed(2)}%\n      </div>\n`;\n\n  progressBarHTML += `\n<div class='progress-bar progress-bar-striped bg-warning'\n     role='progressbar'\n     style='width: ${(waitForReview / total) * 100}%'\n     aria-valuenow='${(waitForReview / total) * 100}'\n     aria-valuemin='0'\n     aria-valuemax='100'>\n    ${((waitForReview / total) * 100).toFixed(2)}%\n</div>\n`;\n\n  progressBarHTML += `\n<div class='progress-bar progress-bar-striped bg-warning'\n     role='progressbar'\n     style='width: ${(waitForRelease / total) * 100}%'\n     aria-valuenow='${(waitForRelease / total) * 100}'\n     aria-valuemin='0'\n     aria-valuemax='100'>\n    ${((waitForRelease / total) * 100).toFixed(2)}%\n</div>\n`;\n\n  progressBarHTML += `\n<div class='progress-bar progress-bar-striped bg-success'\n     role='progressbar'\n     style='width: ${(released / total) * 100}%'\n     aria-valuenow='${(released / total) * 100}'\n     aria-valuemin='0'\n     aria-valuemax='100'>\n    ${((released / total) * 100).toFixed(2)}%\n</div>\n`;\n\n  return progressBarHTML;\n}\n\n// Hàm để tạo bảng từ dữ liệu tác vụ\nfunction createTaskTable(tasks, status) {\n  if (tasks.length === 0) {\n    return \"<p>No tasks available.</p>\";\n  }\n\n  const headers = getTableHeaders(status);\n  const rows = tasks.map((task) => createTableRow(task, status));\n\n  return `\n    <table class='table table-bordered'>\n      <thead>\n        <tr>${headers.join(\"\")}</tr>\n      </thead>\n      <tbody>\n        ${rows.join(\"\")}\n      </tbody>\n    </table>\n  `;\n}\n\nfunction getTableHeaders(status) {\n  const baseHeaders = [\"TaskID\", \"P.StartDate\", \"P.EndDate\", \"P.Effort\", \"PIC\", \"Reviewer\"];\n\n  if (status !== STATUS.OPEN) {\n    baseHeaders.push(\"A.StartDate\", \"A.EndDate\", \"A.Effort\", \"%A.Completed\");\n  }\n\n  if ([STATUS.OPEN, STATUS.IN_PROGRESS, STATUS.WAITING_REVIEW, STATUS.WAITING_RELEASE].includes(status)) {\n    baseHeaders.push(\"Action\");\n  }\n\n  return baseHeaders.map((header) => `<th>${header}</th>`);\n}\n\nfunction createTableRow(task, status) {\n  const cells = [\n    `<td><a href=\"#\" class=\"openModal link-info\" data-taskid=\"${task[0]}\">${task[0]}</a></td>`,\n    `<td>${excelDateToJSDate(task[5])}</td>`,\n    `<td>${excelDateToJSDate(task[6])}</td>`,\n    `<td>${task[8]}</td>`,\n    `<td>${task[3]}</td>`,\n    `<td>${task[4]}</td>`,\n  ];\n\n  if (status !== STATUS.OPEN) {\n    cells.push(\n      `<td>${excelDateToJSDate(task[9])}</td>`,\n      `<td>${excelDateToJSDate(task[10])}</td>`,\n      `<td>${task[11]}</td>`,\n      `<td>${task[12] * 100}%</td>`\n    );\n  }\n\n  cells.push(getActionButton(task[0], status));\n\n  return `<tr>${cells.join(\"\")}</tr>`;\n}\n\nfunction getActionButton(taskId, status) {\n  const buttons = {\n    [STATUS.OPEN]: `<button class=\"btn btn-sm btn-primary btn-task-start\" data-taskid=\"${taskId}\">Start</button>`,\n    [STATUS.IN_PROGRESS]: `<button class=\"btn btn-sm btn-primary btn-task-inprogress\" data-taskid=\"${taskId}\">Completed</button>`,\n    [STATUS.WAITING_REVIEW]: `<button class=\"btn btn-sm btn-primary btn-task-review\" data-taskid=\"${taskId}\">Pass</button>`,\n    [STATUS.WAITING_RELEASE]: `<button class=\"btn btn-sm btn-primary btn-task-release\" data-taskid=\"${taskId}\">Release</button>`,\n  };\n\n  return buttons[status] ? `<td>${buttons[status]}</td>` : \"\";\n}\n\nfunction addBtnTaskStartListeners(status) {\n  const listenerConfig = {\n    [STATUS.OPEN]: {\n      elementId: \"notDoneTasks\",\n      buttonClass: \"btn-task-start\",\n      message: \"has been started\",\n    },\n    [STATUS.IN_PROGRESS]: {\n      elementId: \"doingTasks\",\n      buttonClass: \"btn-task-inprogress\",\n      message: \"has been completed\",\n    },\n    [STATUS.WAITING_REVIEW]: {\n      elementId: \"reviewTasks\",\n      buttonClass: \"btn-task-review\",\n      message: \"has been passed review\",\n    },\n    [STATUS.WAITING_RELEASE]: {\n      elementId: \"releaseTasks\",\n      buttonClass: \"btn-task-release\",\n      message: \"has been released\",\n    },\n  };\n\n  const config = listenerConfig[status];\n  if (!config) return;\n\n  document.getElementById(config.elementId).addEventListener(\"click\", function (e) {\n    if (e.target && e.target.classList.contains(config.buttonClass)) {\n      const taskId = e.target.getAttribute(\"data-taskid\");\n      showNotification(`Task ${taskId} ${config.message}.`, \"success\", 3000);\n    }\n  });\n}\n\nfunction addModalEventListeners() {\n  // Add event listeners for update progress modal\n  document.querySelectorAll(\".openModal\").forEach((link) => {\n    link.addEventListener(\"click\", function (event) {\n      event.preventDefault();\n      const taskId = this.getAttribute(\"data-taskid\");\n      document.getElementById(\"progressTaskID\").value = taskId; // Set TaskID in modal\n      getTaskByID(taskId);\n\n      // eslint-disable-next-line no-undef\n      let myModal = new bootstrap.Modal(document.getElementById(\"updateProgressModal\"));\n      myModal.show();\n    });\n  });\n\n  // Add event listeners for logwork modal\n  // document.querySelectorAll(\".open-logwork-modal\").forEach((button) => {\n  //   button.addEventListener(\"click\", function (event) {\n  //     event.preventDefault();\n  //     const taskId = this.getAttribute(\"data-taskid\");\n  //     document.getElementById(\"taskId\").value = taskId; // Set TaskID in modal\n  //     getTaskByID(taskId);\n\n  //     // eslint-disable-next-line no-undef\n  //     let myModal = new bootstrap.Modal(document.getElementById(\"logworkModal\"));\n  //     myModal.show();\n  //   });\n  // });\n}\n"],"names":["jsDateToExcelDate","dateString","date","Date","getTime","getTimezoneOffset","excelDateToJSDate","excelDate","isNaN","toISOString","split","showNotification","message","type","notificationEl","document","getElementById","textContent","className","concat","classList","remove","setTimeout","add","STATUS","Object","freeze","OPEN","IN_PROGRESS","WAITING_REVIEW","WAITING_RELEASE","RELEASED","getTaskByID","taskId","Excel","run","context","range","workbook","worksheets","getItem","tables","getDataBodyRange","load","sync","then","task","values","find","row","querySelector","value","catch","error","console","log","loadFullname","selectedAccount","fullnameDisplay","getRange","data","headers","i","length","indexOf","innerText","getTasksByAccount","groupedTasks","forEach","pic","trim","toLowerCase","completed","push","total","notStarted","inProgress","waitForReview","waitForRelease","released","progressBarHTML","totalT","doingCount","notDoneCount","reviewCount","releaseCount","releasedCount","innerHTML","toFixed","createTaskTable","querySelectorAll","link","addEventListener","event","preventDefault","this","getAttribute","bootstrap","Modal","show","addBtnTaskStartListeners","tasks","status","baseHeaders","includes","map","header","getTableHeaders","rows","cells","buttons","_defineProperty","getActionButton","join","createTableRow","config","elementId","buttonClass","e","target","contains","Office","onReady","info","host","HostType","accountSelect","accountIndex","account","option","createElement","text","appendChild","onchange","taskData","startDate","endDate","effort","percentCompleted","releaseDate","taskID","taskIndex","findIndex","updatedRow","getRow","updateTaskDetails","myModalElement","myModal","getInstance","hide","today","dateInput","warn"],"sourceRoot":""}