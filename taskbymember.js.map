{"version":3,"file":"taskbymember.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskbymember/taskbymember.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // initData();\n    loadAccounts();\n    document.getElementById(\"accountSelect\").onchange = loadFullname;\n  }\n});\n\nfunction initData() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Setting\");\n    var range = sheet.getRange(\"B1:B5\");\n\n    range.load(\"values\");\n    return context.sync().then(function () {\n      var project_code = range.values[0];\n      var project_manager = range.values[1];\n      document.getElementById(\"v_project_code\").innerText = project_code;\n      document.getElementById(\"v_project_manager\").innerText = project_manager;\n    });\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n}\n\nfunction loadAccounts() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Resource\");\n    var table = sheet.tables.getItem(\"TblResource\");\n    var range = table.getRange();\n\n    range.load(\"values\");\n\n    return context.sync().then(function () {\n      var data = range.values; // Lấy toàn bộ giá trị trong bảng\n      var accountSelect = document.getElementById(\"accountSelect\");\n      var headers = data[0];\n\n      // Lặp qua dữ liệu để thêm vào combobox\n      for (var i = 1; i < data.length; i++) {\n        // Bỏ qua hàng tiêu đề\n        var account = data[i][headers.indexOf(\"Account\")]; // Column Account (index 1)\n        var option = document.createElement(\"option\");\n        option.value = account;\n        option.text = account;\n        accountSelect.appendChild(option);\n      }\n    });\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n}\n\nfunction loadFullname() {\n  var accountSelect = document.getElementById(\"accountSelect\");\n  var selectedAccount = accountSelect.value;\n  var fullnameDisplay = document.getElementById(\"fullnameDisplay\");\n\n  if (selectedAccount) {\n    Excel.run(function (context) {\n      var sheet = context.workbook.worksheets.getItem(\"Resource\");\n      var table = sheet.tables.getItem(\"TblResource\");\n      var range = table.getRange();\n\n      range.load(\"values\");\n\n      return context.sync().then(function () {\n        var data = range.values;\n        var headers = data[0];\n\n        // Tìm fullname tương ứng với account đã chọn\n        for (var i = 1; i < data.length; i++) {\n          // Bỏ qua hàng tiêu đề\n          if (data[i][headers.indexOf(\"Account\")] === selectedAccount) {\n            // Column Account (index 1)\n            fullnameDisplay.innerText = data[i][headers.indexOf(\"Fullname\")]; // Column Fullname (index 2)\n            getTasksByAccount();\n            return;\n          }\n        }\n        fullnameDisplay.innerText = \"\"; // Nếu không tìm thấy, xóa nội dung\n      });\n    }).catch(function (error) {\n      console.log(\"Error: \" + error);\n    });\n  } else {\n    fullnameDisplay.innerText = \"\"; // Nếu không chọn gì, xóa nội dung\n  }\n}\n\nfunction getTasksByAccount() {\n  const accountSelect = document.getElementById(\"accountSelect\");\n  const selectedAccount = accountSelect.value;\n\n  if (!selectedAccount) {\n    document.getElementById(\"response-content\").innerText = \"Please select an account.\";\n    return;\n  }\n\n  Excel.run(function (context) {\n    const sheet = context.workbook.worksheets.getItem(\"WBS\");\n    const table = sheet.tables.getItem(\"TblWbs\");\n    const range = table.getRange();\n    range.load(\"values\");\n    return context.sync().then(function () {\n      const data = range.values;\n\n      // Nhóm dữ liệu theo trạng thái\n      const groupedTasks = {\n        \"Tổng nhiệm vụ\": [],\n        \"Task đang làm\": [],\n        \"Task chưa làm\": [],\n        \"Task chờ review\": [],\n        \"Task chờ release\": [],\n        \"Task đã release\": [],\n      };\n\n      data.forEach((row) => {\n        const pic = row[3].trim().toLowerCase(); // Đặt chỉ số cột PIC\n        const completed = row[12]; // Đặt chỉ số cột Completed\n        showNotification(\n          `PIC: \"${pic.trim().toLowerCase()}\", Selected Account: \"${selectedAccount.trim().toLowerCase()}\"`,\n          \"sussced\"\n        ); // Log để kiểm tra giá trị\n        if (pic === selectedAccount.trim().toLowerCase()) {\n          groupedTasks[\"Tổng nhiệm vụ\"].push(row);\n          if (completed > 0 && completed < 80) {\n            groupedTasks[\"Task đang làm\"].push(row);\n          } else if (completed === 0) {\n            groupedTasks[\"Task chưa làm\"].push(row);\n          } else if (completed === 80) {\n            groupedTasks[\"Task chờ review\"].push(row);\n          } else if (completed === 90) {\n            groupedTasks[\"Task chờ release\"].push(row);\n          } else if (completed === 100) {\n            groupedTasks[\"Task đã release\"].push(row);\n          }\n        }\n      });\n      // Hiển thị kết quả ra HTML\n      // Cập nhật hiển thị số lượng và nội dung cho các nhóm tác vụ\n      document.getElementById(\"totalTasksCount\").innerText = groupedTasks[\"Tổng nhiệm vụ\"].length;\n      document.getElementById(\"doingCount\").innerText = groupedTasks[\"Task đang làm\"].length;\n      document.getElementById(\"notDoneCount\").innerText = groupedTasks[\"Task chưa làm\"].length;\n      document.getElementById(\"reviewCount\").innerText = groupedTasks[\"Task chờ review\"].length;\n      document.getElementById(\"releaseCount\").innerText = groupedTasks[\"Task chờ release\"].length;\n      document.getElementById(\"releasedCount\").innerText = groupedTasks[\"Task đã release\"].length;\n\n      // Cập nhật nội dung cho từng nhóm tác vụ\n      document.getElementById(\"doingTasks\").innerHTML = createTaskTable(groupedTasks[\"Task đang làm\"]);\n      document.getElementById(\"notDoneTasks\").innerHTML = createTaskTable(groupedTasks[\"Task chưa làm\"]);\n      document.getElementById(\"reviewTasks\").innerHTML = createTaskTable(groupedTasks[\"Task chờ review\"]);\n      document.getElementById(\"releaseTasks\").innerHTML = createTaskTable(groupedTasks[\"Task chờ release\"]);\n      document.getElementById(\"releasedTasks\").innerHTML = createTaskTable(groupedTasks[\"Task đã release\"]);\n    });\n  }).catch(function (error) {\n    console.error(\"Error retrieving tasks:\", error);\n    document.getElementById(\"response-content\").innerText = \"Error retrieving tasks.\";\n  });\n}\n\n// Hàm để tạo bảng từ dữ liệu tác vụ\nfunction createTaskTable(tasks) {\n  if (tasks.length === 0) {\n    return \"<p>No tasks available.</p>\";\n  }\n\n  // Bắt đầu tạo bảng\n  let table = \"<table class='table table-bordered'>\";\n  table += \"<thead><tr>\";\n  table += \"<th>TaskID</th><th>P.StartDate</th><th>P.EndDate</th><th>P.Effort</th>\";\n  table += \"<th>A.StartDate</th><th>A.EndDate</th><th>A.Effort</th><th>%A.Completed</th>\";\n  table += \"</tr></thead><tbody>\";\n\n  // Thêm từng hàng vào bảng\n  tasks.forEach((task) => {\n    table += \"<tr>\";\n    // table += `<td><a href=\"#\" onclick=\"openTaskPane('${task[0]}')\">${task[0]}</a></td>`; // TaskID với sự kiện click\n    table += `<td><a href=\"#\">${task[0]}</a></td>`; // TaskID với sự kiện click\n    table += `<td>${excelDateToJSDate(task[5])}</td>`; // P.StartDate\n    table += `<td>${excelDateToJSDate(task[6])}</td>`; // P.EndDate\n    table += `<td>${task[8]}</td>`; // P.Effort\n    table += `<td>${excelDateToJSDate(task[9])}</td>`; // A.StartDate\n    table += `<td>${excelDateToJSDate(task[10])}</td>`; // A.EndDate\n    table += `<td>${task[11]}</td>`; // A.Effort\n    table += `<td>${task[12]}</td>`; // %A.Completed\n    table += \"</tr>\";\n  });\n\n  table += \"</tbody></table>\";\n  return table;\n}\n\nfunction createChart() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getActiveWorksheet();\n    var range = sheet.getRange(\"A1:B5\"); // Đặt vùng dữ liệu cho biểu đồ\n\n    range.values = [\n      [\"Label\", \"Value\"],\n      [\"A\", 30],\n      [\"B\", 40],\n      [\"C\", 50],\n      [\"D\", 60],\n    ]; // Dữ liệu mẫu\n\n    return context.sync().then(function () {\n      // Xóa biểu đồ cũ nếu có\n      var ctx = document.getElementById(\"chartContainer\").getContext(\"2d\");\n\n      // Nếu biểu đồ đã tồn tại, xóa nó\n      if (window.myChart) {\n        window.myChart.destroy();\n      }\n\n      // Tạo biểu đồ mới\n      window.myChart = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: [\"A\", \"B\", \"C\", \"D\"],\n          datasets: [\n            {\n              label: \"Task is completed\",\n              data: [10, 20, 30, 40],\n              backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n              borderColor: \"rgba(75, 192, 192, 1)\",\n              borderWidth: 1,\n            },\n          ],\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n            },\n          },\n        },\n      });\n    });\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n}\n\nfunction template() {\n  return Excel.run(function (context) {\n    /**\n     * Insert your Excel code here\n     */\n    const range = context.workbook.getSelectedRange();\n\n    // Read the range address\n    range.load(\"address\");\n\n    // Update the fill color\n    range.format.fill.color = \"red\";\n\n    return context.sync().then(function () {\n      document.getElementById(\"response-content\").textContent = \"response\";\n    });\n  });\n}\n\nfunction loadTasks() {\n  return Excel.run(function (context) {\n    /**\n     * Insert your Excel code here\n     */\n    const range = context.workbook.getSelectedRange();\n\n    // Read the range address\n    range.load(\"address\");\n\n    // Update the fill color\n    range.format.fill.color = \"red\";\n\n    return context.sync().then(function () {\n      let account = document.getElementById(\"accountInput\").value;\n      let response = \"\";\n      if (account === \"\") {\n        response = \"Please enter your account\";\n      } else {\n        response = \"You need to complete the tasks below. Please check priority and do it.\";\n      }\n      document.getElementById(\"response-content\").textContent = response;\n      console.log(`The range address was ${range.address}.`);\n    });\n  });\n}\n\n/** Default helper for invoking an action and handling errors. */\nfunction tryCatch(callback) {\n  Promise.resolve()\n    .then(callback)\n    .catch(function (error) {\n      // Note: In a production add-in, you'd want to notify the user through your add-in's UI.\n      console.error(error);\n    });\n}\n\nfunction showNotification(message, type) {\n  const notificationEl = document.getElementById(\"notification\");\n  notificationEl.textContent = message;\n  notificationEl.className = `alert alert-${type} position-fixed bottom-0 start-50 translate-middle-x mb-3`;\n  notificationEl.classList.remove(\"d-none\");\n\n  // Ẩn thông báo sau 3 giây\n  // eslint-disable-next-line no-undef\n  setTimeout(() => {\n    notificationEl.classList.add(\"d-none\");\n  }, 3000);\n}\n\nfunction excelDateToJSDate(excelDate) {\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  return utcDate.toISOString().split(\"T\")[0]; // Return as 'YYYY-MM-DD'\n}\n\nfunction jsDateToExcelDate(dateString) {\n  const date = new Date(dateString);\n  const excelDate = Math.floor((date - new Date(1900, 0, 1)) / (1000 * 60 * 60 * 24)) + 25569;\n  return excelDate;\n}\n\n// Hàm mở task pane\n// function openTaskPane(taskId) {\n//   Office.context.ui.displayDialogAsync(\n//     `https://localhost:3000/addtask.html?taskId=${taskId}`,\n//     { height: 50, width: 50 },\n//     function (result) {\n//       console.log(`Task pane opened for ${taskId}`);\n//     }\n//   );\n// }\n"],"names":["loadFullname","selectedAccount","document","getElementById","value","fullnameDisplay","Excel","run","context","range","workbook","worksheets","getItem","tables","getRange","load","sync","then","data","values","headers","i","length","indexOf","innerText","getTasksByAccount","catch","error","console","log","groupedTasks","forEach","row","message","notificationEl","pic","trim","toLowerCase","completed","concat","textContent","className","classList","remove","setTimeout","add","push","innerHTML","createTaskTable","tasks","table","task","excelDateToJSDate","excelDate","isNaN","Date","toISOString","split","Office","onReady","info","host","HostType","accountSelect","account","option","createElement","text","appendChild","onchange"],"sourceRoot":""}