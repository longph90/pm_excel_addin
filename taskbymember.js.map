{"version":3,"file":"taskbymember.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./src/taskbymember/common.js","webpack://office-addin-taskpane-js/./src/taskbymember/constant.js","webpack://office-addin-taskpane-js/./src/taskbymember/taskbymember.js"],"sourcesContent":["/**\n * Converts a JavaScript Date string to an Excel date number.\n * @param {string} dateString - The date string in 'YYYY-MM-DD' format.\n * @returns {number} The Excel date number.\n */\nexport function jsDateToExcelDate(dateString) {\n  // Convert the date string to a JavaScript Date object\n  const date = new Date(dateString);\n  // Convert JavaScript Date to Excel date number\n  let excelDate = 25569.0 + (date.getTime() - date.getTimezoneOffset() * 60 * 1000) / (1000 * 60 * 60 * 24);\n  return excelDate;\n}\n\n/**\n * Converts an Excel date number to a JavaScript Date object.\n * @param {number} excelDate - The Excel date number.\n * @returns {string} The date in 'YYYY-MM-DD' format, or an empty string if input is invalid.\n */\nexport function excelDateToJSDate(excelDate) {\n  // Check if the input is valid\n  if (!excelDate || isNaN(excelDate)) {\n    return \"\";\n  }\n  // Convert Excel date to JavaScript Date\n  const utcDate = new Date((excelDate - 25569) * 86400 * 1000);\n  // Return the date in 'YYYY-MM-DD' format\n  return utcDate.toISOString().split(\"T\")[0];\n}\n\n/**\n * Displays a notification message to the user.\n * @param {string} message - The message to display.\n * @param {string} type - The type of notification (e.g., 'success', 'error', 'warning').\n */\nexport function showNotification(message, type) {\n  // Get the notification element\n  const notificationEl = document.getElementById(\"notification\");\n\n  // Set the message content\n  notificationEl.textContent = message;\n\n  // Set the CSS classes for styling and positioning\n  notificationEl.className = `alert alert-${type}`;\n\n  // Make the notification visible\n  notificationEl.style.display = \"block\";\n\n  // Hide the notification after 5 seconds\n  setTimeout(() => {\n    notificationEl.style.display = \"none\";\n  }, 5000);\n}\n\nexport function getDataTable(sheetName, tableName) {\n  return new Promise((resolve, reject) => {\n    Excel.run((context) => {\n      // Get the specified sheet\n      let sheet = context.workbook.worksheets.getItem(sheetName);\n      // Get the specified table\n      let table = sheet.tables.getItem(tableName);\n      // Load the header row\n      let range = table.getRange();\n      range.load(\"values\");\n\n      return context.sync().then(() => {\n        resolve(range.values);\n      });\n    }).catch((error) => {\n      showNotification(\"Error when reading data from \" + sheetName + \": \" + error.message, \"danger\");\n      reject(error);\n    });\n  });\n}\n\nexport async function getDataHeader(sheetName, tableName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0];\n  } catch (error) {\n    showNotification(\"Error when reading data from\" + sheetName + \": \" + error.message, \"danger\");\n  }\n}\n\nexport async function getIndexByColumnName(sheetName, tableName, columnName) {\n  try {\n    const data = await getDataTable(sheetName, tableName);\n    return data[0].indexOf(columnName);\n  } catch (error) {\n    return -1;\n  }\n}\n\nexport function getIndexRowbyTaskId(data, taskId) {\n  try {\n    const taskIndex = data.findIndex((row) => row[0] === taskId); // Tìm index của task\n    return taskIndex;\n  } catch (error) {\n    return -1;\n  }\n}\n","export const STATUS = Object.freeze({\n  OPEN: \"OPEN\",\n  IN_PROGRESS: \"IN_PROGRESS\",\n  WAITING_REVIEW: \"WAITING_REVIEW\",\n  WAITING_RELEASE: \"WAITING_RELEASE\",\n  RELEASED: \"RELEASED\",\n});\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n// You can specify which plugins you need\nimport {\n  excelDateToJSDate,\n  jsDateToExcelDate,\n  showNotification,\n  getIndexByColumnName,\n  getDataTable,\n  getIndexRowbyTaskId,\n} from \"./common.js\";\nimport { STATUS } from \"./constant.js\";\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    // initData();\n\n    loadAccounts();\n    getTasksByAccount();\n    document.getElementById(\"accountSelect\").onchange = loadFullname;\n\n    // Add click event listener to the \"Update Progress\" button\n    document.getElementById(\"btnUpdateProgress\").addEventListener(\"click\", function () {\n      // Get the task ID from the input field\n      const taskId = document.getElementById(\"progressTaskID\").value;\n\n      // Create an object with updated task data from form inputs\n      const taskData = {\n        pic: document.getElementById(\"pic\").value,\n        reviewer: document.getElementById(\"reviewer\").value,\n        pStartDate: document.getElementById(\"pStartDate\").value,\n        pEndDate: document.getElementById(\"pEndDate\").value,\n        pEffort: document.getElementById(\"pEffort\").value,\n        startDate: document.getElementById(\"aStartDate\").value,\n        endDate: document.getElementById(\"aEndDate\").value,\n        effort: document.getElementById(\"aEffort\").value,\n        percentCompleted: document.getElementById(\"percentACompleted\").value,\n        releaseDate: document.getElementById(\"aReleaseDate\").value,\n      };\n\n      // Fetch the task by ID (possibly to validate or prepare for update)\n      getTaskByID(taskId);\n\n      // Update the task details with the new data\n      updateTaskDetails(taskId, taskData);\n      loadFullname();\n\n      // Close the modal after update\n      let myModalElement = document.getElementById(\"updateProgressModal\");\n\n      // Try to get an instance of the Bootstrap modal\n      // eslint-disable-next-line no-undef\n      let myModal = bootstrap.Modal.getInstance(myModalElement);\n\n      if (myModal) {\n        // If an instance exists, hide the modal\n        myModal.hide();\n      } else {\n        // If no instance exists, create a new one and hide it\n        // eslint-disable-next-line no-undef\n        let newModal = new bootstrap.Modal(myModalElement);\n        newModal.hide();\n      }\n    });\n\n    let myModalElement = document.getElementById(\"updateProgressModal\");\n    myModalElement.addEventListener(\"hidden.bs.modal\", function () {\n      // Các hành động cần thiết sau khi modal đã đóng\n      console.log(\"Modal đã đóng.\");\n    });\n\n    // Wait for the DOM to be fully loaded before executing the script\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      // Set the default date for the logwork form to today's date\n      setDefaultLogworkDate();\n    });\n  }\n});\n\n/**\n * Sets the default date for the logwork form to today's date.\n */\nfunction setDefaultLogworkDate() {\n  // Get today's date in YYYY-MM-DD format\n  const today = getTodayDate();\n\n  // Set the value of the date input field\n  const dateInput = document.getElementById(\"logworkForm_date\");\n  if (dateInput) {\n    dateInput.value = today;\n  } else {\n    console.warn(\"Logwork date input field not found\");\n  }\n}\n\n/**\n * Returns today's date in YYYY-MM-DD format.\n * @returns {string} Today's date in YYYY-MM-DD format\n */\nfunction getTodayDate() {\n  return new Date().toISOString().split(\"T\")[0];\n}\n\nfunction updateTaskDetails(taskID, taskData) {\n  Excel.run(function (context) {\n    const sheet = context.workbook.worksheets.getItem(\"WBS\");\n    const table = sheet.tables.getItem(\"TblWbs\");\n    const range = table.getDataBodyRange();\n    range.load(\"values\");\n\n    return context.sync().then(function () {\n      const data = range.values;\n      const taskIndex = data.findIndex((row) => row[0] === taskID); // Tìm index của task\n\n      if (taskIndex !== -1) {\n        // Tạo một mảng mới với các giá trị cập nhật\n        const updatedRow = [...data[taskIndex]];\n\n        // Update new fields\n        updatedRow[3] = taskData.pic;\n        updatedRow[4] = taskData.reviewer;\n        updatedRow[5] = jsDateToExcelDate(taskData.pStartDate);\n        updatedRow[6] = jsDateToExcelDate(taskData.pEndDate);\n        updatedRow[8] = taskData.pEffort;\n\n        // Update existing fields\n        updatedRow[9] = jsDateToExcelDate(taskData.startDate);\n        updatedRow[10] = jsDateToExcelDate(taskData.endDate);\n        updatedRow[11] = taskData.effort;\n        updatedRow[12] = taskData.percentCompleted / 100;\n        updatedRow[13] = jsDateToExcelDate(taskData.releaseDate);\n\n        // Cập nhật toàn bộ hàng\n        range.getRow(taskIndex).values = [updatedRow];\n\n        return context.sync().then(function () {\n          showNotification(\"Update Successfully\", \"success\");\n        });\n      } else {\n        showNotification(\"Không tìm thấy thông tin: \" + taskID, \"danger\");\n      }\n    });\n  }).catch(function (error) {\n    console.log(error);\n    showNotification(\"Error updating task details: \" + error.message, \"danger\");\n  });\n}\n\nfunction getTaskByID(taskId) {\n  Excel.run(function (context) {\n    const sheet = context.workbook.worksheets.getItem(\"WBS\");\n    const table = sheet.tables.getItem(\"TblWbs\");\n    const range = table.getDataBodyRange();\n    range.load(\"values\");\n\n    const sheetSetting = context.workbook.worksheets.getItem(\"Setting\");\n    const domain = sheetSetting.getRange(\"B3\");\n    domain.load(\"values\");\n\n    return context.sync().then(function () {\n      const values = range.values;\n      const task = values.find((row) => row[0] === taskId); // Tìm task dựa trên TaskID\n      if (task) {\n        document.querySelector(\"#progressForm #progressTaskID\").value = taskId;\n\n        const linkToBack = document.querySelector(\"#linkToBack\");\n        const backlogUrl = domain.values[0][0];\n        linkToBack.href = `${backlogUrl}${taskId}`;\n        linkToBack.textContent = `Open Backlog`;\n        linkToBack.target = \"_blank\";\n        linkToBack.rel = \"noopener noreferrer\";\n\n        // New fields\n        document.querySelector(\"#progressForm #pic\").value = task[3]; //  PIC\n        document.querySelector(\"#progressForm #reviewer\").value = task[4]; //  Reviewer\n        document.querySelector(\"#progressForm #pStartDate\").value = excelDateToJSDate(task[5]); //  P.StartDate\n        document.querySelector(\"#progressForm #pEndDate\").value = excelDateToJSDate(task[6]); //  P.EndDate\n        document.querySelector(\"#progressForm #pEffort\").value = task[8]; //  P.Effort\n\n        // Existing fields\n        document.querySelector(\"#progressForm #aStartDate\").value = excelDateToJSDate(task[9]); // A.StartDate\n        document.querySelector(\"#progressForm #aEndDate\").value = excelDateToJSDate(task[10]); // A.EndDate\n        document.querySelector(\"#progressForm #aEffort\").value = task[11]; // A.Effort\n        document.querySelector(\"#progressForm #percentACompleted\").value = task[12] * 100; // %A.Completed\n        document.querySelector(\"#progressForm #aReleaseDate\").value = excelDateToJSDate(task[13]); // A.ReleaseDate\n      } else {\n        showNotification(\"không tìm thấy thông tin: \" + taskId, \"danger\");\n      }\n    });\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\n\nfunction initData() {\n  Excel.run(function (context) {\n    var sheet = context.workbook.worksheets.getItem(\"Setting\");\n    var range = sheet.getRange(\"B1:B5\");\n\n    range.load(\"values\");\n    return context.sync().then(function () {\n      var project_code = range.values[0];\n      var project_manager = range.values[1];\n      document.getElementById(\"v_project_code\").innerText = project_code;\n      document.getElementById(\"v_project_manager\").innerText = project_manager;\n    });\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n}\n\nfunction loadAccounts() {\n  Excel.run(function (context) {\n    let sheet = context.workbook.worksheets.getItem(\"Resource\");\n    let table = sheet.tables.getItem(\"TblResource\");\n    let range = table.getRange();\n\n    range.load(\"values\");\n\n    return context.sync().then(function () {\n      let data = range.values; // Lấy toàn bộ giá trị trong bảng\n      let accountSelect = document.getElementById(\"accountSelect\");\n      let headers = data[0];\n      let accountIndex = headers.indexOf(\"Account\");\n      // Lặp qua dữ liệu để thêm vào combobox\n      for (let i = 1; i < data.length; i++) {\n        // Bỏ qua hàng tiêu đề\n        let account = data[i][accountIndex]; // Column Account (index 1)\n        let option = document.createElement(\"option\");\n        option.value = account;\n        option.text = account;\n        accountSelect.appendChild(option);\n      }\n    });\n  }).catch(function (error) {\n    console.log(\"Error: \" + error);\n  });\n}\n\nfunction loadFullname() {\n  let accountSelect = document.getElementById(\"accountSelect\");\n  let selectedAccount = accountSelect.value;\n  let fullnameDisplay = document.getElementById(\"fullnameDisplay\");\n\n  if (selectedAccount) {\n    Excel.run(function (context) {\n      let sheet = context.workbook.worksheets.getItem(\"Resource\");\n      let table = sheet.tables.getItem(\"TblResource\");\n      let range = table.getRange();\n\n      range.load(\"values\");\n\n      return context.sync().then(function () {\n        let data = range.values;\n        let headers = data[0];\n\n        // Tìm fullname tương ứng với account đã chọn\n        for (let i = 1; i < data.length; i++) {\n          // Bỏ qua hàng tiêu đề\n          if (data[i][headers.indexOf(\"Account\")] === selectedAccount) {\n            // Column Account (index 1)\n            fullnameDisplay.innerText = data[i][headers.indexOf(\"Fullname\")]; // Column Fullname (index 2)\n            getTasksByAccount();\n            return;\n          }\n        }\n        fullnameDisplay.innerText = \"\"; // Nếu không tìm thấy, xóa nội dung\n      });\n    }).catch(function (error) {\n      console.log(\"Error: \" + error);\n    });\n  } else {\n    fullnameDisplay.innerText = \"\"; // Nếu không chọn gì, xóa nội dung\n    getTasksByAccount();\n  }\n}\n\nfunction getTasksByAccount() {\n  const selectedAccount = document.getElementById(\"accountSelect\").value.trim().toLowerCase();\n\n  Excel.run(function (context) {\n    const sheet = context.workbook.worksheets.getItem(\"WBS\");\n    const table = sheet.tables.getItem(\"TblWbs\");\n    const range = table.getRange();\n    range.load(\"values\");\n\n    return context.sync().then(function () {\n      const data = range.values;\n      const groupedTasks = processTaskData(data, selectedAccount);\n      updateUIWithTaskData(groupedTasks);\n    });\n  }).catch(function (error) {\n    console.error(\"Error retrieving tasks:\", error);\n    showNotification(\"Error retrieving tasks:\" + error, \"danger\");\n  });\n}\n\nfunction processTaskData(data, selectedAccount) {\n  const groupedTasks = {\n    \"Tổng nhiệm vụ\": [],\n    \"Task doing\": [],\n    \"Task notDone\": [],\n    \"Task review\": [],\n    \"Task release\": [],\n    \"Task released\": [],\n  };\n\n  data.forEach((row) => {\n    const pic = row[3].trim().toLowerCase();\n    const reviewer = row[4].trim().toLowerCase();\n    const completed = row[12];\n\n    if (shouldIncludeTask(pic, reviewer, selectedAccount)) {\n      categorizeTask(row, completed, groupedTasks);\n    }\n  });\n\n  return groupedTasks;\n}\n\nfunction shouldIncludeTask(pic, reviewer, selectedAccount) {\n  return selectedAccount === \"\" || pic === selectedAccount || reviewer === selectedAccount;\n}\n\nfunction categorizeTask(row, completed, groupedTasks) {\n  groupedTasks[\"Tổng nhiệm vụ\"].push(row);\n\n  if (completed > 0 && completed < 0.8) {\n    groupedTasks[\"Task doing\"].push(row);\n  } else if (completed === 0) {\n    groupedTasks[\"Task notDone\"].push(row);\n  } else if (completed === 0.8) {\n    groupedTasks[\"Task review\"].push(row);\n  } else if (completed === 0.9) {\n    groupedTasks[\"Task release\"].push(row);\n  } else if (completed === 1) {\n    groupedTasks[\"Task released\"].push(row);\n  }\n}\n\nfunction updateUIWithTaskData(groupedTasks) {\n  const counts = {\n    total: groupedTasks[\"Tổng nhiệm vụ\"].length,\n    doing: groupedTasks[\"Task doing\"].length,\n    notDone: groupedTasks[\"Task notDone\"].length,\n    review: groupedTasks[\"Task review\"].length,\n    release: groupedTasks[\"Task release\"].length,\n    released: groupedTasks[\"Task released\"].length,\n  };\n\n  updateTaskCounts(counts);\n  updateProgressBar(counts);\n  updateTaskTables(groupedTasks);\n  addEventListeners();\n}\n\nfunction updateTaskCounts(counts) {\n  Object.entries(counts).forEach(([key, value]) => {\n    const element = document.getElementById(`${key}Count`);\n    if (element) {\n      element.innerText = value;\n    } else {\n      console.warn(`Element with id \"${key}Count\" not found`);\n    }\n  });\n}\n\nfunction updateProgressBar(counts) {\n  document.getElementById(\"taskProgressBar\").innerHTML = addProgressBar(\n    counts.total,\n    counts.notDone,\n    counts.doing,\n    counts.review,\n    counts.release,\n    counts.released\n  );\n}\n\nfunction updateTaskTables(groupedTasks) {\n  const taskStatuses = {\n    notDoneTasks: STATUS.OPEN,\n    doingTasks: STATUS.IN_PROGRESS,\n    reviewTasks: STATUS.WAITING_REVIEW,\n    releaseTasks: STATUS.WAITING_RELEASE,\n    releasedTasks: null,\n  };\n\n  Object.entries(taskStatuses).forEach(([elementId, status]) => {\n    const taskGroup = elementId.replace(\"Tasks\", \"\");\n    document.getElementById(elementId).innerHTML = createTaskTable(groupedTasks[`Task ${taskGroup}`], status);\n  });\n}\n\nfunction addEventListeners() {\n  addModalEventListeners();\n  [STATUS.OPEN, STATUS.IN_PROGRESS, STATUS.WAITING_REVIEW, STATUS.WAITING_RELEASE].forEach(addBtnTaskStartListeners);\n}\n\nfunction addProgressBar(total, notStarted, inProgress, waitForReview, waitForRelease, released) {\n  let progressBarHTML = `\n      <div class='progress-bar progress-bar-striped bg-danger'\n           role='progressbar'\n           style='width: ${(notStarted / total) * 100}%'\n           aria-valuenow='${(notStarted / total) * 100}'\n           aria-valuemin='0'\n           aria-valuemax='100'>\n          ${((notStarted / total) * 100).toFixed(2)}%\n      </div>\n`;\n\n  progressBarHTML += `\n      <div class='progress-bar progress-bar-striped bg-warning'\n           role='progressbar'\n           style='width: ${(inProgress / total) * 100}%'\n           aria-valuenow='${(inProgress / total) * 100}'\n           aria-valuemin='0'\n           aria-valuemax='100'>\n          ${((inProgress / total) * 100).toFixed(2)}%\n      </div>\n`;\n\n  progressBarHTML += `\n<div class='progress-bar progress-bar-striped bg-warning'\n     role='progressbar'\n     style='width: ${(waitForReview / total) * 100}%'\n     aria-valuenow='${(waitForReview / total) * 100}'\n     aria-valuemin='0'\n     aria-valuemax='100'>\n    ${((waitForReview / total) * 100).toFixed(2)}%\n</div>\n`;\n\n  progressBarHTML += `\n<div class='progress-bar progress-bar-striped bg-warning'\n     role='progressbar'\n     style='width: ${(waitForRelease / total) * 100}%'\n     aria-valuenow='${(waitForRelease / total) * 100}'\n     aria-valuemin='0'\n     aria-valuemax='100'>\n    ${((waitForRelease / total) * 100).toFixed(2)}%\n</div>\n`;\n\n  progressBarHTML += `\n<div class='progress-bar progress-bar-striped bg-success'\n     role='progressbar'\n     style='width: ${(released / total) * 100}%'\n     aria-valuenow='${(released / total) * 100}'\n     aria-valuemin='0'\n     aria-valuemax='100'>\n    ${((released / total) * 100).toFixed(2)}%\n</div>\n`;\n\n  return progressBarHTML;\n}\n\n// Hàm để tạo bảng từ dữ liệu tác vụ\nfunction createTaskTable(tasks, status) {\n  if (tasks.length === 0) {\n    return \"<p>No tasks available.</p>\";\n  }\n\n  const headers = getTableHeaders(status);\n  const rows = tasks.map((task) => createTableRow(task, status));\n\n  return `\n    <table class='table table-bordered'>\n      <thead>\n        <tr>${headers.join(\"\")}</tr>\n      </thead>\n      <tbody>\n        ${rows.join(\"\")}\n      </tbody>\n    </table>\n  `;\n}\n\nfunction getTableHeaders(status) {\n  const baseHeaders = [\"TaskID\", \"TaskName\", \"P.StartDate\", \"P.EndDate\", \"P.Effort\", \"PIC\", \"Reviewer\"];\n\n  if (status !== STATUS.OPEN) {\n    // baseHeaders.push(\"A.StartDate\", \"A.EndDate\", \"A.Effort\", \"%A.Completed\");\n    baseHeaders.push(\"A.Effort\", \"%A.Completed\");\n  }\n\n  if ([STATUS.OPEN, STATUS.IN_PROGRESS, STATUS.WAITING_REVIEW, STATUS.WAITING_RELEASE].includes(status)) {\n    baseHeaders.push(\"Action\");\n  }\n\n  baseHeaders.push(\"Link Refer\");\n  return baseHeaders.map((header) => `<th>${header}</th>`);\n}\n\nfunction createTableRow(task, status) {\n  const cells = [\n    `<td><a href=\"#\" class=\"openModal link-info\" data-taskid=\"${task[0]}\">${task[0]}</a></td>`,\n    `<td><span class=\"d-inline-block text-truncate\" style=\"max-width: 50px;\">${task[1]}</span></td>`,\n    `<td>${excelDateToJSDate(task[5])}</td>`,\n    `<td>${excelDateToJSDate(task[6])}</td>`,\n    `<td>${task[8]}</td>`,\n    `<td>${task[3]}</td>`,\n    `<td>${task[4]}</td>`,\n  ];\n\n  if (status !== STATUS.OPEN) {\n    cells.push(\n      // `<td>${excelDateToJSDate(task[9])}</td>`,\n      // `<td>${excelDateToJSDate(task[10])}</td>`,\n      `<td>${task[11]}</td>`,\n      `<td>${task[12] * 100}%</td>`\n    );\n  }\n\n  cells.push(getActionButton(task, status));\n  cells.push(createDropdown(\"#\"));\n\n  return `<tr>${cells.join(\"\")}</tr>`;\n}\nfunction createDropdown(param) {\n  const linkHref = param ? param : \"#\";\n  const linkText = param ? \"Link\" : \"Chưa gắn link\";\n\n  return `\n    <td>\n    <div class=\"dropdown\">\n      <button class=\"btn btn-sm btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton1\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n        Link\n      </button>\n      <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\n        <li><a class=\"dropdown-item\" href=\"${linkHref}\">${linkText}</a></li>\n      </ul>\n    </div>\n    </td>\n  `;\n}\n\nfunction getActionButton(task, status) {\n  const buttons = {\n    [STATUS.OPEN]: {\n      class: \"btn-task-start\",\n      icon: \"▶️\",\n      tooltip: \"Click To Start Task\",\n      validateLink: task[18],\n    },\n    [STATUS.IN_PROGRESS]: {\n      class: \"btn-task-inprogress\",\n      icon: \"✅\",\n      tooltip: \"Mark as Completed\",\n      validateLink: task[17],\n    },\n    [STATUS.WAITING_REVIEW]: {\n      class: \"btn-task-review\",\n      icon: \"✅\",\n      tooltip: \"Mark as Pass Review\",\n    },\n    [STATUS.WAITING_RELEASE]: {\n      class: \"btn-task-release\",\n      icon: \"🚀\",\n      tooltip: \"Click To Release Task\",\n    },\n  };\n\n  const button = buttons[status];\n  if (!button) return \"\";\n\n  return `\n    <td>\n      <button \n        class=\"btn btn-sm ${button.class}\" \n        data-taskid=\"${task[0]}\" \n        data-validateLink=\"${button.validateLink}\"\n        title=\"${button.tooltip}\"\n        data-toggle=\"tooltip\" \n        data-placement=\"top\"\n      >\n        ${button.icon}\n      </button>\n    </td>\n  `;\n}\n\nfunction addBtnTaskStartListeners(status) {\n  const listenerConfig = {\n    [STATUS.OPEN]: {\n      elementId: \"notDoneTasks\",\n      buttonClass: \"btn-task-start\",\n      completionPercentage: 0.1,\n      updateField: { index: 9, value: \"A.StartDate\" },\n      validateLink: { flg: true, message: \"Add link estimation vào, giỡn mặt hả???\" },\n    },\n    [STATUS.IN_PROGRESS]: {\n      elementId: \"doingTasks\",\n      buttonClass: \"btn-task-inprogress\",\n      completionPercentage: 0.8,\n      validateLink: { flg: true, message: \"Chưa đính kèm file evidence\" },\n    },\n    [STATUS.WAITING_REVIEW]: {\n      elementId: \"reviewTasks\",\n      buttonClass: \"btn-task-review\",\n      completionPercentage: 0.9,\n      updateField: { index: 10, value: \"A.EndDate\" },\n    },\n    [STATUS.WAITING_RELEASE]: {\n      elementId: \"releaseTasks\",\n      buttonClass: \"btn-task-release\",\n      completionPercentage: 1,\n      updateField: { index: 13, value: \"A.ReleaseDate\" },\n    },\n  };\n\n  const config = listenerConfig[status];\n  if (!config) return;\n\n  document.getElementById(config.elementId).addEventListener(\"click\", handleTaskUpdate);\n\n  function handleTaskUpdate(e) {\n    if (e.target && e.target.classList.contains(config.buttonClass)) {\n      if (config.validateLink) {\n        const validLink = e.target.getAttribute(\"data-validateLink\");\n        if (!validateLink(validLink, config.validateLink.message)) return;\n      }\n      const taskId = e.target.getAttribute(\"data-taskid\");\n      updateTaskInExcel(taskId, config)\n        .then(() => {\n          loadFullname();\n          showNotification(\"Task updated successfully!\", \"success\");\n        })\n        .catch((error) => {\n          console.log(error);\n          showNotification(`Error: ${error.message}`, \"danger\");\n        });\n    }\n  }\n  function validateLink(input, message) {\n    if (!input) {\n      showNotification(`${message}`, \"danger\");\n      return false;\n    }\n    return true;\n  }\n\n  function updateTaskInExcel(taskId, config) {\n    return Excel.run((context) => {\n      const wbsTable = context.workbook.tables.getItem(\"TblWbs\");\n      const wbsRange = wbsTable.getDataBodyRange();\n      wbsRange.load(\"values\");\n\n      return context.sync().then(() => {\n        const wbsData = wbsRange.values;\n        const taskIndex = wbsData.findIndex((row) => row[0] === taskId);\n\n        if (taskIndex !== -1) {\n          const updatedRow = [...wbsData[taskIndex]];\n          updatedRow[12] = config.completionPercentage; // %A.Completed\n\n          if (config.updateField) {\n            const today = new Date().toISOString().split(\"T\")[0]; // Format: YYYY-MM-DD\n            updatedRow[config.updateField.index] = jsDateToExcelDate(today);\n          }\n\n          wbsRange.getRow(taskIndex).values = [updatedRow];\n        }\n\n        return context.sync();\n      });\n    });\n  }\n}\n\nfunction addModalEventListeners() {\n  const openModalLinks = document.querySelectorAll(\".openModal\");\n  const updateProgressModal = document.getElementById(\"updateProgressModal\");\n  const progressTaskIDInput = document.getElementById(\"progressTaskID\");\n\n  openModalLinks.forEach((link) => {\n    link.addEventListener(\"click\", handleModalOpen);\n  });\n\n  function handleModalOpen(event) {\n    event.preventDefault();\n    const taskId = this.getAttribute(\"data-taskid\");\n    progressTaskIDInput.value = taskId;\n    getTaskByID(taskId);\n    showModal();\n  }\n\n  function showModal() {\n    // eslint-disable-next-line no-undef\n    const myModal = new bootstrap.Modal(updateProgressModal);\n    myModal.show();\n  }\n}\n"],"names":["jsDateToExcelDate","dateString","date","Date","getTime","getTimezoneOffset","excelDateToJSDate","excelDate","isNaN","toISOString","split","showNotification","message","type","notificationEl","document","getElementById","textContent","className","concat","style","display","setTimeout","STATUS","Object","freeze","OPEN","IN_PROGRESS","WAITING_REVIEW","WAITING_RELEASE","RELEASED","getTaskByID","taskId","Excel","run","context","range","workbook","worksheets","getItem","tables","getDataBodyRange","load","domain","getRange","sync","then","task","values","find","row","querySelector","value","linkToBack","backlogUrl","href","target","rel","catch","error","console","log","loadFullname","selectedAccount","fullnameDisplay","data","headers","i","length","indexOf","innerText","getTasksByAccount","trim","toLowerCase","groupedTasks","forEach","pic","reviewer","completed","shouldIncludeTask","push","categorizeTask","processTaskData","counts","total","doing","notDone","review","release","released","entries","_ref","_ref2","_slicedToArray","key","element","warn","updateTaskCounts","notStarted","inProgress","waitForReview","waitForRelease","progressBarHTML","innerHTML","toFixed","updateProgressBar","taskStatuses","notDoneTasks","doingTasks","reviewTasks","releaseTasks","releasedTasks","_ref3","_ref4","elementId","status","taskGroup","replace","tasks","baseHeaders","includes","map","header","getTableHeaders","rows","cells","button","_defineProperty","class","icon","tooltip","validateLink","getActionButton","join","createTableRow","createTaskTable","updateTaskTables","openModalLinks","querySelectorAll","updateProgressModal","progressTaskIDInput","handleModalOpen","event","preventDefault","this","getAttribute","bootstrap","Modal","show","link","addEventListener","addModalEventListeners","addBtnTaskStartListeners","updateUIWithTaskData","config","buttonClass","completionPercentage","updateField","index","flg","e","classList","contains","input","wbsRange","wbsData","taskIndex","findIndex","updatedRow","_toConsumableArray","today","getRow","updateTaskInExcel","Office","onReady","info","host","HostType","accountSelect","accountIndex","account","option","createElement","text","appendChild","onchange","taskData","pStartDate","pEndDate","pEffort","startDate","endDate","effort","percentCompleted","releaseDate","taskID","updateTaskDetails","myModalElement","myModal","getInstance","hide","dateInput"],"sourceRoot":""}