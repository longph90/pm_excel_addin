{"version":3,"file":"taskpane.js","mappings":"kYAYA,SAASA,IACP,OAAOC,MAAMC,KAAI,SAAUC,GACzB,IAAMC,EAAgBD,EAAQE,SAASC,OAAOC,QAAQ,mBAChDC,EAAWL,EAAQE,SAASC,OAAOC,QAAQ,UAG3CE,EAAgBL,EAAcM,mBAC9BC,EAAWH,EAASE,mBAE1BD,EAAcG,KAAK,UACnBD,EAASC,KAAK,UAGd,IAAMC,EAAiBT,EAAcU,oBAGrC,OAFAD,EAAeD,KAAK,UAEbT,EAAQY,OAAOC,MAAK,WACzB,IAa8BC,EAbxBC,EAAeT,EAAcU,OAC7BC,EAAUT,EAASQ,OACnBE,EAAa,IAAIC,IAAIF,EAAQG,KAAI,SAACC,GAAG,OAAKA,EAAI,EAAE,KAGhDC,EAAkBZ,EAAeM,OAAO,GACxCO,EAAWD,EAAgBE,QAAQ,MACnCC,EAAgBH,EAAgBE,QAAQ,SACxCE,EAAiBJ,EAAgBE,QAAQ,OACzCG,EAAeL,EAAgBE,QAAQ,OACvCI,EAAWN,EAAgBE,QAAQ,UAEzCK,E,6lBAAAC,CACkBf,GAAY,QAAAgB,EAAA,WAAE,I,EAArBV,EAAGP,EAAAkB,MACNC,EAAMZ,EAAIE,GAChB,GAAKL,EAAWgB,IAAID,GA+Cb,CACL,IAAME,EAAYlB,EAAQmB,WAAU,SAACf,GAAG,OAAKA,EAAI,KAAOY,CAAG,IAC3D,GAAkB,IAAdE,EAAiB,CAEnB,IAAME,E,+CAAiBpB,EAAQkB,K,qSAC/BE,EAAW,GAAKhB,EAAIO,GAGpBpB,EAAS8B,OAAOH,GAAWnB,OAAS,CAACqB,EACvC,CACF,KAzD0B,CACxB,IAAME,EAASN,EACTO,EAAWnB,EAAIO,GAIfa,EAAapB,EAAIK,GACjBgB,EAAWrB,EAAIM,GAQfgB,EAAWtB,EAAII,GAQrBpB,EAASuC,KAAKC,IAAI,KAAM,CACtB,CACEN,EACAC,EAvBS,GACD,GACK,GAyBbC,EACAC,EAvBiB,GACL,GACG,GACF,GACD,GACU,GACL,GAyBjBC,EAvBgB,GACH,GACI,GACP,GACD,KA2Bf,CAWF,EA5DA,IAAAd,EAAAiB,MAAAhC,EAAAe,EAAAkB,KAAAC,MAAAjB,GA4DC,OAAAkB,GAAApB,EAAAqB,EAAAD,EAAA,SAAApB,EAAAsB,GAAA,CAED,OAAOnD,EAAQY,OAAOC,MAAK,WACzBuC,EAAiB,4BAA6B,UAChD,GACF,GACF,IAAGC,OAAM,SAAUC,GACjBC,QAAQC,IAAIF,GACZF,EAAiB,UAADK,OAAWH,EAAMI,SAAW,SAC9C,GACF,CAEA,SAASN,EAAiBM,EAASC,GACjC,IAAMC,EAAiBC,SAASC,eAAe,gBAC/CF,EAAeG,YAAcL,EAC7BE,EAAeI,UAAY,eAAHP,OAAkBE,EAAI,6DAC9CC,EAAeK,UAAUC,OAAO,UAIhCC,YAAW,WACTP,EAAeK,UAAUpB,IAAI,SAC/B,GAAG,IACL,CAvHAuB,OAAOC,SAAQ,SAACC,GACVA,EAAKC,OAASH,OAAOI,SAAS1E,QAChC+D,SAASC,eAAe,eAAeW,QAAU5E,EAErD,G","sources":["webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"btnSyncData\").onclick = mappingTask;\n  }\n});\n\nfunction mappingTask() {\n  return Excel.run(function (context) {\n    const externalTable = context.workbook.tables.getItem(\"TblExternalData\");\n    const wbsTable = context.workbook.tables.getItem(\"TblWbs\");\n\n    // Lấy dữ liệu từ TblExternalData\n    const externalRange = externalTable.getDataBodyRange();\n    const wbsRange = wbsTable.getDataBodyRange();\n\n    externalRange.load(\"values\");\n    wbsRange.load(\"values\");\n\n    // Tải hàng tiêu đề\n    const headerRowRange = externalTable.getHeaderRowRange();\n    headerRowRange.load(\"values\");\n\n    return context.sync().then(function () {\n      const externalData = externalRange.values;\n      const wbsData = wbsRange.values;\n      const wbsTaskIDs = new Set(wbsData.map((row) => row[0])); // Giả sử TaskID ở cột đầu tiên\n\n      // Lấy tiêu đề cột từ TblExternalData\n      const headersExternal = headerRowRange.values[0];\n      const keyIndex = headersExternal.indexOf(\"キー\");\n      const parentIdIndex = headersExternal.indexOf(\"親課題キー\");\n      const startDateIndex = headersExternal.indexOf(\"開始日\");\n      const endDateIndex = headersExternal.indexOf(\"期限日\");\n      const category = headersExternal.indexOf(\"カテゴリー名\");\n\n      // Duyệt qua dữ liệu từ TblExternalData\n      for (const row of externalData) {\n        const key = row[keyIndex]; // Lấy giá trị từ cột キー\n        if (!wbsTaskIDs.has(key)) {\n          const taskID = key;\n          const taskName = row[category];\n          const type = \"\";\n          const pic = \"\";\n          const reviewer = \"\";\n          const pStartDate = row[startDateIndex];\n          const pEndDate = row[endDateIndex];\n          const pReleaseDate = \"\";\n          const pEffort = \"\";\n          const aStartDate = \"\";\n          const aEndDate = \"\";\n          const aEffort = \"\";\n          const percentACompleted = \"\";\n          const aReleaseDate = \"\";\n          const parentID = row[parentIdIndex];\n          const linkBackLog = \"\";\n          const linkJira = \"\";\n          const linkEvidence = \"\";\n          const cause = \"\";\n          const note = \"\";\n\n          // Thêm hàng mới vào bảng\n          wbsTable.rows.add(null, [\n            [\n              taskID,\n              taskName,\n              type,\n              pic,\n              reviewer,\n              pStartDate,\n              pEndDate,\n              pReleaseDate,\n              pEffort,\n              aStartDate,\n              aEndDate,\n              aEffort,\n              percentACompleted,\n              aReleaseDate,\n              parentID,\n              linkBackLog,\n              linkJira,\n              linkEvidence,\n              cause,\n              note,\n            ],\n          ]);\n        } else {\n          const taskIndex = wbsData.findIndex((row) => row[0] === key); // Tìm index của task\n          if (taskIndex !== 1) {\n            // Tạo một mảng mới với các giá trị cập nhật\n            const updatedRow = [...wbsData[taskIndex]];\n            updatedRow[1] = row[category];\n\n            // Cập nhật toàn bộ hàng\n            wbsRange.getRow(taskIndex).values = [updatedRow];\n          }\n        }\n      }\n\n      return context.sync().then(() => {\n        showNotification(\"Task synced successfully!\", \"success\");\n      });\n    });\n  }).catch(function (error) {\n    console.log(error);\n    showNotification(`Error: ${error.message}`, \"danger\");\n  });\n}\n\nfunction showNotification(message, type) {\n  const notificationEl = document.getElementById(\"notification\");\n  notificationEl.textContent = message;\n  notificationEl.className = `alert alert-${type} position-fixed bottom-0 start-50 translate-middle-x mb-3`;\n  notificationEl.classList.remove(\"d-none\");\n\n  // Ẩn thông báo sau 3 giây\n  // eslint-disable-next-line no-undef\n  setTimeout(() => {\n    notificationEl.classList.add(\"d-none\");\n  }, 3000);\n}\n"],"names":["mappingTask","Excel","run","context","externalTable","workbook","tables","getItem","wbsTable","externalRange","getDataBodyRange","wbsRange","load","headerRowRange","getHeaderRowRange","sync","then","_step","externalData","values","wbsData","wbsTaskIDs","Set","map","row","headersExternal","keyIndex","indexOf","parentIdIndex","startDateIndex","endDateIndex","category","_iterator","_createForOfIteratorHelper","_loop","value","key","has","taskIndex","findIndex","updatedRow","getRow","taskID","taskName","pStartDate","pEndDate","parentID","rows","add","s","n","done","err","e","f","showNotification","catch","error","console","log","concat","message","type","notificationEl","document","getElementById","textContent","className","classList","remove","setTimeout","Office","onReady","info","host","HostType","onclick"],"sourceRoot":""}